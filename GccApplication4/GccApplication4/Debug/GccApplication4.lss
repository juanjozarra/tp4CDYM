
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000005da  0000066e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800118  00800118  00000686  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000686  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001567  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a7d  00000000  00000000  00001daf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bae  00000000  00000000  0000282c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  000033dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000607  00000000  00000000  0000371c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e74  00000000  00000000  00003d23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004b97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  2c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  38:	0c 94 aa 02 	jmp	0x554	; 0x554 <__vector_14>
  3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  48:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>

00000068 <LcdCustomChar>:
  68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	ea ed       	ldi	r30, 0xDA	; 218
  bc:	f5 e0       	ldi	r31, 0x05	; 5
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a8 31       	cpi	r26, 0x18	; 24
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>

000000ca <__do_clear_bss>:
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	a8 e1       	ldi	r26, 0x18	; 24
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
  d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
  d4:	af 31       	cpi	r26, 0x1F	; 31
  d6:	b2 07       	cpc	r27, r18
  d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
  da:	0e 94 ce 02 	call	0x59c	; 0x59c <main>
  de:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <_exit>

000000e2 <__bad_interrupt>:
  e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e6 <ADC_init>:
(rango de 0 a 65535) que indica el valor de la temperatura multiplicado por 10 */


void ADC_init()
{
	ADMUX= 0b00000000; // Vref=AVCC, bit justificados a derecho, ADC0/PC0 pin de lectura
  e6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

	// Divisor de frecuencia = 128 -> 16000KHz/128 = 125 KHz 
	ADCSRA |= (1<<ADPS0);
  ea:	ea e7       	ldi	r30, 0x7A	; 122
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	81 60       	ori	r24, 0x01	; 1
  f2:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS1);
  f4:	80 81       	ld	r24, Z
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2);
  fa:	80 81       	ld	r24, Z
  fc:	84 60       	ori	r24, 0x04	; 4
  fe:	80 83       	st	Z, r24
 100:	08 95       	ret

00000102 <ADC_GetData>:
}

int ADC_GetData()
{	
	// Encendemos el ADC
	ADCSRA |= (1<<ADEN);
 102:	ea e7       	ldi	r30, 0x7A	; 122
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	83 e0       	ldi	r24, 0x03	; 3
 10e:	8a 95       	dec	r24
 110:	f1 f7       	brne	.-4      	; 0x10e <ADC_GetData+0xc>
 112:	00 00       	nop
	_delay_us(10);	// Esperamos a que caliente

	// Mandamos el muestreo
	ADCSRA |= (1<<ADSC);
 114:	80 81       	ld	r24, Z
 116:	80 64       	ori	r24, 0x40	; 64
 118:	80 83       	st	Z, r24

	// Esperamos a que muestree, leyendo el flag
	while( !(ADCSRA & (1<<ADIF)) );
 11a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 11e:	84 ff       	sbrs	r24, 4
 120:	fc cf       	rjmp	.-8      	; 0x11a <ADC_GetData+0x18>
	ADCSRA |= (1<<ADIF);	// Reiniciamos el flag
 122:	ea e7       	ldi	r30, 0x7A	; 122
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	80 61       	ori	r24, 0x10	; 16
 12a:	80 83       	st	Z, r24

	// Apagamos el ADC
	ADCSRA &=~ (1<<ADEN);
 12c:	80 81       	ld	r24, Z
 12e:	8f 77       	andi	r24, 0x7F	; 127
 130:	80 83       	st	Z, r24

	return ADC; //Retornamos el valor del registro ADC 
 132:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 136:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 13a:	08 95       	ret

0000013c <ADC_Update>:

void ADC_Update(){
	sensor = ADC_GetData(); //Leo el valor del registro de ADC0
 13c:	0e 94 81 00 	call	0x102	; 0x102 <ADC_GetData>
 140:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <sensor+0x1>
 144:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <sensor>
	temp = (sensor * 5000UL / 1024UL); //Valor de voltaje medido se obtiene mediante la ecucacion Vmedido = (sensor * 5000mV) / 2^10
 148:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <sensor>
 14c:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <sensor+0x1>
 150:	a8 e8       	ldi	r26, 0x88	; 136
 152:	b3 e1       	ldi	r27, 0x13	; 19
 154:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <__umulhisi3>
 158:	dc 01       	movw	r26, r24
 15a:	cb 01       	movw	r24, r22
 15c:	07 2e       	mov	r0, r23
 15e:	7a e0       	ldi	r23, 0x0A	; 10
 160:	b6 95       	lsr	r27
 162:	a7 95       	ror	r26
 164:	97 95       	ror	r25
 166:	87 95       	ror	r24
 168:	7a 95       	dec	r23
 16a:	d1 f7       	brne	.-12     	; 0x160 <ADC_Update+0x24>
 16c:	70 2d       	mov	r23, r0
 16e:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 172:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
	if (temp > 240)
 176:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 17a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 17e:	81 3f       	cpi	r24, 0xF1	; 241
 180:	91 05       	cpc	r25, r1
 182:	18 f0       	brcs	.+6      	; 0x18a <ADC_Update+0x4e>
	{
		PORTB = (0b00000001);
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	85 b9       	out	0x05, r24	; 5
 188:	08 95       	ret
	}
	else
	{
		if (temp < 170)
 18a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 18e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 192:	8a 3a       	cpi	r24, 0xAA	; 170
 194:	91 05       	cpc	r25, r1
 196:	18 f4       	brcc	.+6      	; 0x19e <ADC_Update+0x62>
		{
			PORTB = (0b00000010);			
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	85 b9       	out	0x05, r24	; 5
 19c:	08 95       	ret
		}
		else
		{
			PORTB = 0b00000000;
 19e:	15 b8       	out	0x05, r1	; 5
 1a0:	08 95       	ret

000001a2 <LCDsendChar>:
		}
		
		// write character to display
		LCDsendChar(c);
	}	
}
 1a2:	98 2f       	mov	r25, r24
 1a4:	90 7f       	andi	r25, 0xF0	; 240
 1a6:	9b b9       	out	0x0b, r25	; 11
 1a8:	9b b1       	in	r25, 0x0b	; 11
 1aa:	91 60       	ori	r25, 0x01	; 1
 1ac:	9b b9       	out	0x0b, r25	; 11
 1ae:	9b b1       	in	r25, 0x0b	; 11
 1b0:	94 60       	ori	r25, 0x04	; 4
 1b2:	9b b9       	out	0x0b, r25	; 11
 1b4:	2d e0       	ldi	r18, 0x0D	; 13
 1b6:	2a 95       	dec	r18
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCDsendChar+0x14>
 1ba:	00 00       	nop
 1bc:	9b b1       	in	r25, 0x0b	; 11
 1be:	9b 7f       	andi	r25, 0xFB	; 251
 1c0:	9b b9       	out	0x0b, r25	; 11
 1c2:	9b b1       	in	r25, 0x0b	; 11
 1c4:	9e 7f       	andi	r25, 0xFE	; 254
 1c6:	9b b9       	out	0x0b, r25	; 11
 1c8:	9d e0       	ldi	r25, 0x0D	; 13
 1ca:	9a 95       	dec	r25
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCDsendChar+0x28>
 1ce:	00 00       	nop
 1d0:	20 e1       	ldi	r18, 0x10	; 16
 1d2:	82 9f       	mul	r24, r18
 1d4:	c0 01       	movw	r24, r0
 1d6:	11 24       	eor	r1, r1
 1d8:	8b b9       	out	0x0b, r24	; 11
 1da:	8b b1       	in	r24, 0x0b	; 11
 1dc:	81 60       	ori	r24, 0x01	; 1
 1de:	8b b9       	out	0x0b, r24	; 11
 1e0:	8b b1       	in	r24, 0x0b	; 11
 1e2:	84 60       	ori	r24, 0x04	; 4
 1e4:	8b b9       	out	0x0b, r24	; 11
 1e6:	8d e0       	ldi	r24, 0x0D	; 13
 1e8:	8a 95       	dec	r24
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <LCDsendChar+0x46>
 1ec:	00 00       	nop
 1ee:	8b b1       	in	r24, 0x0b	; 11
 1f0:	8b 7f       	andi	r24, 0xFB	; 251
 1f2:	8b b9       	out	0x0b, r24	; 11
 1f4:	8b b1       	in	r24, 0x0b	; 11
 1f6:	8e 7f       	andi	r24, 0xFE	; 254
 1f8:	8b b9       	out	0x0b, r24	; 11
 1fa:	9d e0       	ldi	r25, 0x0D	; 13
 1fc:	9a 95       	dec	r25
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <LCDsendChar+0x5a>
 200:	00 00       	nop
 202:	08 95       	ret

00000204 <LCDsendCommand>:
 204:	98 2f       	mov	r25, r24
 206:	90 7f       	andi	r25, 0xF0	; 240
 208:	9b b9       	out	0x0b, r25	; 11
 20a:	9b b1       	in	r25, 0x0b	; 11
 20c:	94 60       	ori	r25, 0x04	; 4
 20e:	9b b9       	out	0x0b, r25	; 11
 210:	e9 ef       	ldi	r30, 0xF9	; 249
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	31 97       	sbiw	r30, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <LCDsendCommand+0x10>
 218:	00 c0       	rjmp	.+0      	; 0x21a <LCDsendCommand+0x16>
 21a:	00 00       	nop
 21c:	9b b1       	in	r25, 0x0b	; 11
 21e:	9b 7f       	andi	r25, 0xFB	; 251
 220:	9b b9       	out	0x0b, r25	; 11
 222:	e9 ef       	ldi	r30, 0xF9	; 249
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	31 97       	sbiw	r30, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <LCDsendCommand+0x22>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <LCDsendCommand+0x28>
 22c:	00 00       	nop
 22e:	f0 e1       	ldi	r31, 0x10	; 16
 230:	8f 9f       	mul	r24, r31
 232:	c0 01       	movw	r24, r0
 234:	11 24       	eor	r1, r1
 236:	8b b9       	out	0x0b, r24	; 11
 238:	8b b1       	in	r24, 0x0b	; 11
 23a:	84 60       	ori	r24, 0x04	; 4
 23c:	8b b9       	out	0x0b, r24	; 11
 23e:	89 ef       	ldi	r24, 0xF9	; 249
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <LCDsendCommand+0x3e>
 246:	00 c0       	rjmp	.+0      	; 0x248 <LCDsendCommand+0x44>
 248:	00 00       	nop
 24a:	8b b1       	in	r24, 0x0b	; 11
 24c:	8b 7f       	andi	r24, 0xFB	; 251
 24e:	8b b9       	out	0x0b, r24	; 11
 250:	e9 ef       	ldi	r30, 0xF9	; 249
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	31 97       	sbiw	r30, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <LCDsendCommand+0x50>
 258:	00 c0       	rjmp	.+0      	; 0x25a <LCDsendCommand+0x56>
 25a:	00 00       	nop
 25c:	08 95       	ret

0000025e <LCDclr>:
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	0e 94 02 01 	call	0x204	; 0x204 <LCDsendCommand>
 264:	08 95       	ret

00000266 <LCDhome>:
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	0e 94 02 01 	call	0x204	; 0x204 <LCDsendCommand>
 26c:	08 95       	ret

0000026e <LCDstring>:
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	00 97       	sbiw	r24, 0x00	; 0
 278:	69 f0       	breq	.+26     	; 0x294 <LCDstring+0x26>
 27a:	d6 2f       	mov	r29, r22
 27c:	8c 01       	movw	r16, r24
 27e:	c0 e0       	ldi	r28, 0x00	; 0
 280:	07 c0       	rjmp	.+14     	; 0x290 <LCDstring+0x22>
 282:	f8 01       	movw	r30, r16
 284:	ec 0f       	add	r30, r28
 286:	f1 1d       	adc	r31, r1
 288:	80 81       	ld	r24, Z
 28a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCDsendChar>
 28e:	cf 5f       	subi	r28, 0xFF	; 255
 290:	cd 17       	cp	r28, r29
 292:	b8 f3       	brcs	.-18     	; 0x282 <LCDstring+0x14>
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	0f 91       	pop	r16
 29c:	08 95       	ret

0000029e <LCDdefinechar>:
 29e:	ef 92       	push	r14
 2a0:	ff 92       	push	r15
 2a2:	0f 93       	push	r16
 2a4:	1f 93       	push	r17
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	7c 01       	movw	r14, r24
 2ac:	86 2f       	mov	r24, r22
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	80 64       	ori	r24, 0x40	; 64
 2be:	c0 e0       	ldi	r28, 0x00	; 0
 2c0:	d0 e0       	ldi	r29, 0x00	; 0
 2c2:	0d c0       	rjmp	.+26     	; 0x2de <LCDdefinechar+0x40>
 2c4:	f7 01       	movw	r30, r14
 2c6:	ec 0f       	add	r30, r28
 2c8:	fd 1f       	adc	r31, r29
 2ca:	14 91       	lpm	r17, Z
 2cc:	01 e0       	ldi	r16, 0x01	; 1
 2ce:	08 0f       	add	r16, r24
 2d0:	0e 94 02 01 	call	0x204	; 0x204 <LCDsendCommand>
 2d4:	81 2f       	mov	r24, r17
 2d6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCDsendChar>
 2da:	21 96       	adiw	r28, 0x01	; 1
 2dc:	80 2f       	mov	r24, r16
 2de:	c8 30       	cpi	r28, 0x08	; 8
 2e0:	d1 05       	cpc	r29, r1
 2e2:	80 f3       	brcs	.-32     	; 0x2c4 <LCDdefinechar+0x26>
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	1f 91       	pop	r17
 2ea:	0f 91       	pop	r16
 2ec:	ff 90       	pop	r15
 2ee:	ef 90       	pop	r14
 2f0:	08 95       	ret

000002f2 <LCDinit>:
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	85 ea       	ldi	r24, 0xA5	; 165
 2f8:	9e e0       	ldi	r25, 0x0E	; 14
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <LCDinit+0x8>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <LCDinit+0xe>
 300:	00 00       	nop
 302:	1b b8       	out	0x0b, r1	; 11
 304:	1b b8       	out	0x0b, r1	; 11
 306:	8a b1       	in	r24, 0x0a	; 10
 308:	80 6f       	ori	r24, 0xF0	; 240
 30a:	8a b9       	out	0x0a, r24	; 10
 30c:	8a b1       	in	r24, 0x0a	; 10
 30e:	87 60       	ori	r24, 0x07	; 7
 310:	8a b9       	out	0x0a, r24	; 10
 312:	90 e3       	ldi	r25, 0x30	; 48
 314:	9b b9       	out	0x0b, r25	; 11
 316:	8b b1       	in	r24, 0x0b	; 11
 318:	84 60       	ori	r24, 0x04	; 4
 31a:	8b b9       	out	0x0b, r24	; 11
 31c:	e9 ef       	ldi	r30, 0xF9	; 249
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	31 97       	sbiw	r30, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <LCDinit+0x2e>
 324:	00 c0       	rjmp	.+0      	; 0x326 <LCDinit+0x34>
 326:	00 00       	nop
 328:	8b b1       	in	r24, 0x0b	; 11
 32a:	8b 7f       	andi	r24, 0xFB	; 251
 32c:	8b b9       	out	0x0b, r24	; 11
 32e:	e9 ef       	ldi	r30, 0xF9	; 249
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	31 97       	sbiw	r30, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <LCDinit+0x40>
 336:	00 c0       	rjmp	.+0      	; 0x338 <LCDinit+0x46>
 338:	00 00       	nop
 33a:	9b b9       	out	0x0b, r25	; 11
 33c:	8b b1       	in	r24, 0x0b	; 11
 33e:	84 60       	ori	r24, 0x04	; 4
 340:	8b b9       	out	0x0b, r24	; 11
 342:	89 ef       	ldi	r24, 0xF9	; 249
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <LCDinit+0x54>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <LCDinit+0x5a>
 34c:	00 00       	nop
 34e:	8b b1       	in	r24, 0x0b	; 11
 350:	8b 7f       	andi	r24, 0xFB	; 251
 352:	8b b9       	out	0x0b, r24	; 11
 354:	e9 ef       	ldi	r30, 0xF9	; 249
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	31 97       	sbiw	r30, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <LCDinit+0x66>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <LCDinit+0x6c>
 35e:	00 00       	nop
 360:	80 e2       	ldi	r24, 0x20	; 32
 362:	8b b9       	out	0x0b, r24	; 11
 364:	8b b1       	in	r24, 0x0b	; 11
 366:	84 60       	ori	r24, 0x04	; 4
 368:	8b b9       	out	0x0b, r24	; 11
 36a:	89 ef       	ldi	r24, 0xF9	; 249
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <LCDinit+0x7c>
 372:	00 c0       	rjmp	.+0      	; 0x374 <LCDinit+0x82>
 374:	00 00       	nop
 376:	8b b1       	in	r24, 0x0b	; 11
 378:	8b 7f       	andi	r24, 0xFB	; 251
 37a:	8b b9       	out	0x0b, r24	; 11
 37c:	e9 ef       	ldi	r30, 0xF9	; 249
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	31 97       	sbiw	r30, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <LCDinit+0x8e>
 384:	00 c0       	rjmp	.+0      	; 0x386 <LCDinit+0x94>
 386:	00 00       	nop
 388:	88 e2       	ldi	r24, 0x28	; 40
 38a:	0e 94 02 01 	call	0x204	; 0x204 <LCDsendCommand>
 38e:	8c e0       	ldi	r24, 0x0C	; 12
 390:	0e 94 02 01 	call	0x204	; 0x204 <LCDsendCommand>
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	c0 e0       	ldi	r28, 0x00	; 0
 398:	0a c0       	rjmp	.+20     	; 0x3ae <LCDinit+0xbc>
 39a:	d1 e0       	ldi	r29, 0x01	; 1
 39c:	d6 0f       	add	r29, r22
 39e:	8c 2f       	mov	r24, r28
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	88 59       	subi	r24, 0x98	; 152
 3a4:	9f 4f       	sbci	r25, 0xFF	; 255
 3a6:	0e 94 4f 01 	call	0x29e	; 0x29e <LCDdefinechar>
 3aa:	c8 5f       	subi	r28, 0xF8	; 248
 3ac:	6d 2f       	mov	r22, r29
 3ae:	c0 34       	cpi	r28, 0x40	; 64
 3b0:	a0 f3       	brcs	.-24     	; 0x39a <LCDinit+0xa8>
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <LCD_Init>:

void LCD_Init() {
	LCDinit();
 3b8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCDinit>
	LCDclr();
 3bc:	0e 94 2f 01 	call	0x25e	; 0x25e <LCDclr>
	LCDhome();
 3c0:	0e 94 33 01 	call	0x266	; 0x266 <LCDhome>
 3c4:	08 95       	ret

000003c6 <LCD_Update>:
}

void LCD_Update(){
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
 3ce:	67 97       	sbiw	r28, 0x17	; 23
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	f8 94       	cli
 3d4:	de bf       	out	0x3e, r29	; 62
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	cd bf       	out	0x3d, r28	; 61
	char Temp_string[] = "Temp: 00.0 C"; //Preparo la cadena de string a mostrar en el LCD
 3da:	8d e0       	ldi	r24, 0x0D	; 13
 3dc:	eb e0       	ldi	r30, 0x0B	; 11
 3de:	f1 e0       	ldi	r31, 0x01	; 1
 3e0:	de 01       	movw	r26, r28
 3e2:	11 96       	adiw	r26, 0x01	; 1
 3e4:	01 90       	ld	r0, Z+
 3e6:	0d 92       	st	X+, r0
 3e8:	8a 95       	dec	r24
 3ea:	e1 f7       	brne	.-8      	; 0x3e4 <LCD_Update+0x1e>
	char CHARMAP[10]={'0','1','2','3','4','5','6','7','8','9'};
 3ec:	8a e0       	ldi	r24, 0x0A	; 10
 3ee:	e1 e0       	ldi	r30, 0x01	; 1
 3f0:	f1 e0       	ldi	r31, 0x01	; 1
 3f2:	de 01       	movw	r26, r28
 3f4:	1e 96       	adiw	r26, 0x0e	; 14
 3f6:	01 90       	ld	r0, Z+
 3f8:	0d 92       	st	X+, r0
 3fa:	8a 95       	dec	r24
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <LCD_Update+0x30>
	Temp_string[6] = CHARMAP[temp/100] ; // Obtengo la decena correspondiente al valor de temperatura
 3fe:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__data_end>
 402:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__data_end+0x1>
 406:	36 95       	lsr	r19
 408:	27 95       	ror	r18
 40a:	36 95       	lsr	r19
 40c:	27 95       	ror	r18
 40e:	ab e7       	ldi	r26, 0x7B	; 123
 410:	b4 e1       	ldi	r27, 0x14	; 20
 412:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <__umulhisi3>
 416:	96 95       	lsr	r25
 418:	87 95       	ror	r24
 41a:	ee e0       	ldi	r30, 0x0E	; 14
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	ec 0f       	add	r30, r28
 420:	fd 1f       	adc	r31, r29
 422:	e8 0f       	add	r30, r24
 424:	f9 1f       	adc	r31, r25
 426:	80 81       	ld	r24, Z
 428:	8f 83       	std	Y+7, r24	; 0x07
	Temp_string[7] = CHARMAP[(temp/10)%10]; // Obtengo la unidad correspondiente al valor de temperatura
 42a:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__data_end>
 42e:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__data_end+0x1>
 432:	ad ec       	ldi	r26, 0xCD	; 205
 434:	bc ec       	ldi	r27, 0xCC	; 204
 436:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <__umulhisi3>
 43a:	ac 01       	movw	r20, r24
 43c:	56 95       	lsr	r21
 43e:	47 95       	ror	r20
 440:	56 95       	lsr	r21
 442:	47 95       	ror	r20
 444:	56 95       	lsr	r21
 446:	47 95       	ror	r20
 448:	9a 01       	movw	r18, r20
 44a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <__umulhisi3>
 44e:	96 95       	lsr	r25
 450:	87 95       	ror	r24
 452:	96 95       	lsr	r25
 454:	87 95       	ror	r24
 456:	96 95       	lsr	r25
 458:	87 95       	ror	r24
 45a:	9c 01       	movw	r18, r24
 45c:	22 0f       	add	r18, r18
 45e:	33 1f       	adc	r19, r19
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	82 0f       	add	r24, r18
 46e:	93 1f       	adc	r25, r19
 470:	9a 01       	movw	r18, r20
 472:	28 1b       	sub	r18, r24
 474:	39 0b       	sbc	r19, r25
 476:	ee e0       	ldi	r30, 0x0E	; 14
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	ec 0f       	add	r30, r28
 47c:	fd 1f       	adc	r31, r29
 47e:	e2 0f       	add	r30, r18
 480:	f3 1f       	adc	r31, r19
 482:	80 81       	ld	r24, Z
 484:	88 87       	std	Y+8, r24	; 0x08
	Temp_string[9] = CHARMAP[temp%10]; // Obtengo el primer decimal correspondiente al valor de temperatura
 486:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <__data_end>
 48a:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <__data_end+0x1>
 48e:	9a 01       	movw	r18, r20
 490:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <__umulhisi3>
 494:	96 95       	lsr	r25
 496:	87 95       	ror	r24
 498:	96 95       	lsr	r25
 49a:	87 95       	ror	r24
 49c:	96 95       	lsr	r25
 49e:	87 95       	ror	r24
 4a0:	9c 01       	movw	r18, r24
 4a2:	22 0f       	add	r18, r18
 4a4:	33 1f       	adc	r19, r19
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	88 0f       	add	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	82 0f       	add	r24, r18
 4b4:	93 1f       	adc	r25, r19
 4b6:	9a 01       	movw	r18, r20
 4b8:	28 1b       	sub	r18, r24
 4ba:	39 0b       	sbc	r19, r25
 4bc:	ee e0       	ldi	r30, 0x0E	; 14
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	ec 0f       	add	r30, r28
 4c2:	fd 1f       	adc	r31, r29
 4c4:	e2 0f       	add	r30, r18
 4c6:	f3 1f       	adc	r31, r19
 4c8:	80 81       	ld	r24, Z
 4ca:	8a 87       	std	Y+10, r24	; 0x0a
	LCDstring(Temp_string, 12); //Muestro el mensaje en el LCD con la temperatura indicada 
 4cc:	6c e0       	ldi	r22, 0x0C	; 12
 4ce:	ce 01       	movw	r24, r28
 4d0:	01 96       	adiw	r24, 0x01	; 1
 4d2:	0e 94 37 01 	call	0x26e	; 0x26e <LCDstring>
	LCDhome();
 4d6:	0e 94 33 01 	call	0x266	; 0x266 <LCDhome>
}
 4da:	67 96       	adiw	r28, 0x17	; 23
 4dc:	0f b6       	in	r0, 0x3f	; 63
 4de:	f8 94       	cli
 4e0:	de bf       	out	0x3e, r29	; 62
 4e2:	0f be       	out	0x3f, r0	; 63
 4e4:	cd bf       	out	0x3d, r28	; 61
 4e6:	df 91       	pop	r29
 4e8:	cf 91       	pop	r28
 4ea:	08 95       	ret

000004ec <SEOSTimer0Init>:

void SEOSSChedulerTasks();


void SEOSTimer0Init(){
	OCR0A = 156; //Valor con el cual comparar
 4ec:	8c e9       	ldi	r24, 0x9C	; 156
 4ee:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1<<WGM01);// = 0b00000010; Modo CTC
 4f0:	82 e0       	ldi	r24, 0x02	; 2
 4f2:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS02)|(1<<CS00); // = 0b00000101; clk/1024 (From Prescaler) 16MHz/1024 =  15625 Hz
 4f4:	95 e0       	ldi	r25, 0x05	; 5
 4f6:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = (1<<OCIE0A); // Habilita el comparador. T=156/15625 Hz = 9.984ms ~= 10 ms
 4f8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	sei();
 4fc:	78 94       	sei
 4fe:	08 95       	ret

00000500 <SEOSDispatcherTasks>:
}


void SEOSDispatcherTasks(){
	if(ADC_Flag){
 500:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 504:	88 23       	and	r24, r24
 506:	21 f0       	breq	.+8      	; 0x510 <SEOSDispatcherTasks+0x10>
		ADC_Update();
 508:	0e 94 9e 00 	call	0x13c	; 0x13c <ADC_Update>
		ADC_Flag = 0;
 50c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if(LCD_Flag){
 510:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <LCD_Flag>
 514:	88 23       	and	r24, r24
 516:	21 f0       	breq	.+8      	; 0x520 <SEOSDispatcherTasks+0x20>
		LCD_Update();
 518:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LCD_Update>
		LCD_Flag = 0;
 51c:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <LCD_Flag>
 520:	08 95       	ret

00000522 <SEOSSChedulerTasks>:
}

void SEOSSChedulerTasks(){
	static char adcCont=0, lcdCount=0;
	
	if(++adcCont==10)
 522:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <adcCont.1799>
 526:	8f 5f       	subi	r24, 0xFF	; 255
 528:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <adcCont.1799>
 52c:	8a 30       	cpi	r24, 0x0A	; 10
 52e:	29 f4       	brne	.+10     	; 0x53a <SEOSSChedulerTasks+0x18>
	{
		ADC_Flag = 1;
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		adcCont=0;
 536:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <adcCont.1799>
	}
	if(++lcdCount==50){
 53a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <lcdCount.1800>
 53e:	8f 5f       	subi	r24, 0xFF	; 255
 540:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <lcdCount.1800>
 544:	82 33       	cpi	r24, 0x32	; 50
 546:	29 f4       	brne	.+10     	; 0x552 <SEOSSChedulerTasks+0x30>
		LCD_Flag=1;
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <LCD_Flag>
		lcdCount=0;
 54e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <lcdCount.1800>
 552:	08 95       	ret

00000554 <__vector_14>:
		LCD_Flag = 0;
	}
}


ISR(TIMER0_COMPA_vect){
 554:	1f 92       	push	r1
 556:	0f 92       	push	r0
 558:	0f b6       	in	r0, 0x3f	; 63
 55a:	0f 92       	push	r0
 55c:	11 24       	eor	r1, r1
 55e:	2f 93       	push	r18
 560:	3f 93       	push	r19
 562:	4f 93       	push	r20
 564:	5f 93       	push	r21
 566:	6f 93       	push	r22
 568:	7f 93       	push	r23
 56a:	8f 93       	push	r24
 56c:	9f 93       	push	r25
 56e:	af 93       	push	r26
 570:	bf 93       	push	r27
 572:	ef 93       	push	r30
 574:	ff 93       	push	r31
	SEOSSChedulerTasks();
 576:	0e 94 91 02 	call	0x522	; 0x522 <SEOSSChedulerTasks>
}
 57a:	ff 91       	pop	r31
 57c:	ef 91       	pop	r30
 57e:	bf 91       	pop	r27
 580:	af 91       	pop	r26
 582:	9f 91       	pop	r25
 584:	8f 91       	pop	r24
 586:	7f 91       	pop	r23
 588:	6f 91       	pop	r22
 58a:	5f 91       	pop	r21
 58c:	4f 91       	pop	r20
 58e:	3f 91       	pop	r19
 590:	2f 91       	pop	r18
 592:	0f 90       	pop	r0
 594:	0f be       	out	0x3f, r0	; 63
 596:	0f 90       	pop	r0
 598:	1f 90       	pop	r1
 59a:	18 95       	reti

0000059c <main>:


int main(void)
{
	
	DDRB = 0x03; //Seteo a PB0 y PB1 como pin de salida
 59c:	83 e0       	ldi	r24, 0x03	; 3
 59e:	84 b9       	out	0x04, r24	; 4
	DIDR0= 0x01; //Seteo ADC0 como pin de lectura
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	ADC_init();	//Inicializo el ADC
 5a6:	0e 94 73 00 	call	0xe6	; 0xe6 <ADC_init>
	LCD_Init(); //Inicializo el LCD
 5aa:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_Init>
	SEOSTimer0Init(); //Inicializo el atendedor de interrupciones
 5ae:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEOSTimer0Init>
			
    while (1) 
    {
		SEOSDispatcherTasks();
 5b2:	0e 94 80 02 	call	0x500	; 0x500 <SEOSDispatcherTasks>
 5b6:	fd cf       	rjmp	.-6      	; 0x5b2 <main+0x16>

000005b8 <__umulhisi3>:
 5b8:	a2 9f       	mul	r26, r18
 5ba:	b0 01       	movw	r22, r0
 5bc:	b3 9f       	mul	r27, r19
 5be:	c0 01       	movw	r24, r0
 5c0:	a3 9f       	mul	r26, r19
 5c2:	70 0d       	add	r23, r0
 5c4:	81 1d       	adc	r24, r1
 5c6:	11 24       	eor	r1, r1
 5c8:	91 1d       	adc	r25, r1
 5ca:	b2 9f       	mul	r27, r18
 5cc:	70 0d       	add	r23, r0
 5ce:	81 1d       	adc	r24, r1
 5d0:	11 24       	eor	r1, r1
 5d2:	91 1d       	adc	r25, r1
 5d4:	08 95       	ret

000005d6 <_exit>:
 5d6:	f8 94       	cli

000005d8 <__stop_program>:
 5d8:	ff cf       	rjmp	.-2      	; 0x5d8 <__stop_program>
