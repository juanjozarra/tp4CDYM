
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000616  000006aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000616  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800118  00800118  000006c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001567  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a7d  00000000  00000000  00001deb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bae  00000000  00000000  00002868  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  00003418  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000622  00000000  00000000  00003758  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e74  00000000  00000000  00003d7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004bee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  2c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  38:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__vector_14>
  3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  48:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>

00000068 <LcdCustomChar>:
  68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	e6 e1       	ldi	r30, 0x16	; 22
  bc:	f6 e0       	ldi	r31, 0x06	; 6
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a8 31       	cpi	r26, 0x18	; 24
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>

000000ca <__do_clear_bss>:
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	a8 e1       	ldi	r26, 0x18	; 24
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
  d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
  d4:	af 31       	cpi	r26, 0x1F	; 31
  d6:	b2 07       	cpc	r27, r18
  d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
  da:	0e 94 ca 02 	call	0x594	; 0x594 <main>
  de:	0c 94 09 03 	jmp	0x612	; 0x612 <_exit>

000000e2 <__bad_interrupt>:
  e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e6 <ADC_init>:
(rango de 0 a 4294967295) que indica el valor de la temperatura multiplicado por 10 */


void ADC_init()
{
	ADMUX= 0b01000000;
  e6:	80 e4       	ldi	r24, 0x40	; 64
  e8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

	// Divisor de frecuencia = 128 -> 16000/128 = 125 KHz 
	ADCSRA |= (1<<ADPS0);
  ec:	ea e7       	ldi	r30, 0x7A	; 122
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS1);
  f6:	80 81       	ld	r24, Z
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2);
  fc:	80 81       	ld	r24, Z
  fe:	84 60       	ori	r24, 0x04	; 4
 100:	80 83       	st	Z, r24
 102:	08 95       	ret

00000104 <ADC_GetData>:
}

int ADC_GetData()
{	
	// Encendemos el ADC
	ADCSRA |= (1<<ADEN);
 104:	ea e7       	ldi	r30, 0x7A	; 122
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	83 e0       	ldi	r24, 0x03	; 3
 110:	8a 95       	dec	r24
 112:	f1 f7       	brne	.-4      	; 0x110 <ADC_GetData+0xc>
 114:	00 00       	nop
	_delay_us(10);	// Esperamos a que caliente

	// Mandamos el muestreo
	ADCSRA |= (1<<ADSC);
 116:	80 81       	ld	r24, Z
 118:	80 64       	ori	r24, 0x40	; 64
 11a:	80 83       	st	Z, r24

	// Esperamos a que muestree, leyendo el flag
	while( !(ADCSRA & (1<<ADIF)) );
 11c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 120:	84 ff       	sbrs	r24, 4
 122:	fc cf       	rjmp	.-8      	; 0x11c <ADC_GetData+0x18>
	ADCSRA |= (1<<ADIF);	// Reiniciamos el flag
 124:	ea e7       	ldi	r30, 0x7A	; 122
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 61       	ori	r24, 0x10	; 16
 12c:	80 83       	st	Z, r24

	// Apagamos el ADC
	ADCSRA &=~ (1<<ADEN);
 12e:	80 81       	ld	r24, Z
 130:	8f 77       	andi	r24, 0x7F	; 127
 132:	80 83       	st	Z, r24

	return ADC;
 134:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 138:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 13c:	08 95       	ret

0000013e <ADC_Update>:

void ADC_Update(){
	sensor = ADC_GetData();
 13e:	0e 94 82 00 	call	0x104	; 0x104 <ADC_GetData>
 142:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <sensor+0x1>
 146:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <sensor>
	temp = (sensor * 5000UL / 1023UL);
 14a:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <sensor>
 14e:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <sensor+0x1>
 152:	a8 e8       	ldi	r26, 0x88	; 136
 154:	b3 e1       	ldi	r27, 0x13	; 19
 156:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__umulhisi3>
 15a:	2f ef       	ldi	r18, 0xFF	; 255
 15c:	33 e0       	ldi	r19, 0x03	; 3
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	50 e0       	ldi	r21, 0x00	; 0
 162:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__udivmodsi4>
 166:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <__data_end+0x1>
 16a:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <__data_end>
	if (temp > 240)
 16e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 172:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 176:	81 3f       	cpi	r24, 0xF1	; 241
 178:	91 05       	cpc	r25, r1
 17a:	18 f0       	brcs	.+6      	; 0x182 <ADC_Update+0x44>
	{
		PORTB = (0b00000001);
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	85 b9       	out	0x05, r24	; 5
 180:	08 95       	ret
	}
	else
	{
		if (temp < 170)
 182:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 186:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 18a:	8a 3a       	cpi	r24, 0xAA	; 170
 18c:	91 05       	cpc	r25, r1
 18e:	18 f4       	brcc	.+6      	; 0x196 <ADC_Update+0x58>
		{
			PORTB = (0b00000010);			
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	85 b9       	out	0x05, r24	; 5
 194:	08 95       	ret
		}
		else
		{
			PORTB = 0b00000000;
 196:	15 b8       	out	0x05, r1	; 5
 198:	08 95       	ret

0000019a <LCDsendChar>:
		}
		
		// write character to display
		LCDsendChar(c);
	}	
}
 19a:	98 2f       	mov	r25, r24
 19c:	90 7f       	andi	r25, 0xF0	; 240
 19e:	9b b9       	out	0x0b, r25	; 11
 1a0:	9b b1       	in	r25, 0x0b	; 11
 1a2:	91 60       	ori	r25, 0x01	; 1
 1a4:	9b b9       	out	0x0b, r25	; 11
 1a6:	9b b1       	in	r25, 0x0b	; 11
 1a8:	94 60       	ori	r25, 0x04	; 4
 1aa:	9b b9       	out	0x0b, r25	; 11
 1ac:	2d e0       	ldi	r18, 0x0D	; 13
 1ae:	2a 95       	dec	r18
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <LCDsendChar+0x14>
 1b2:	00 00       	nop
 1b4:	9b b1       	in	r25, 0x0b	; 11
 1b6:	9b 7f       	andi	r25, 0xFB	; 251
 1b8:	9b b9       	out	0x0b, r25	; 11
 1ba:	9b b1       	in	r25, 0x0b	; 11
 1bc:	9e 7f       	andi	r25, 0xFE	; 254
 1be:	9b b9       	out	0x0b, r25	; 11
 1c0:	9d e0       	ldi	r25, 0x0D	; 13
 1c2:	9a 95       	dec	r25
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <LCDsendChar+0x28>
 1c6:	00 00       	nop
 1c8:	20 e1       	ldi	r18, 0x10	; 16
 1ca:	82 9f       	mul	r24, r18
 1cc:	c0 01       	movw	r24, r0
 1ce:	11 24       	eor	r1, r1
 1d0:	8b b9       	out	0x0b, r24	; 11
 1d2:	8b b1       	in	r24, 0x0b	; 11
 1d4:	81 60       	ori	r24, 0x01	; 1
 1d6:	8b b9       	out	0x0b, r24	; 11
 1d8:	8b b1       	in	r24, 0x0b	; 11
 1da:	84 60       	ori	r24, 0x04	; 4
 1dc:	8b b9       	out	0x0b, r24	; 11
 1de:	8d e0       	ldi	r24, 0x0D	; 13
 1e0:	8a 95       	dec	r24
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <LCDsendChar+0x46>
 1e4:	00 00       	nop
 1e6:	8b b1       	in	r24, 0x0b	; 11
 1e8:	8b 7f       	andi	r24, 0xFB	; 251
 1ea:	8b b9       	out	0x0b, r24	; 11
 1ec:	8b b1       	in	r24, 0x0b	; 11
 1ee:	8e 7f       	andi	r24, 0xFE	; 254
 1f0:	8b b9       	out	0x0b, r24	; 11
 1f2:	9d e0       	ldi	r25, 0x0D	; 13
 1f4:	9a 95       	dec	r25
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <LCDsendChar+0x5a>
 1f8:	00 00       	nop
 1fa:	08 95       	ret

000001fc <LCDsendCommand>:
 1fc:	98 2f       	mov	r25, r24
 1fe:	90 7f       	andi	r25, 0xF0	; 240
 200:	9b b9       	out	0x0b, r25	; 11
 202:	9b b1       	in	r25, 0x0b	; 11
 204:	94 60       	ori	r25, 0x04	; 4
 206:	9b b9       	out	0x0b, r25	; 11
 208:	e9 ef       	ldi	r30, 0xF9	; 249
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	31 97       	sbiw	r30, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <LCDsendCommand+0x10>
 210:	00 c0       	rjmp	.+0      	; 0x212 <LCDsendCommand+0x16>
 212:	00 00       	nop
 214:	9b b1       	in	r25, 0x0b	; 11
 216:	9b 7f       	andi	r25, 0xFB	; 251
 218:	9b b9       	out	0x0b, r25	; 11
 21a:	e9 ef       	ldi	r30, 0xF9	; 249
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	31 97       	sbiw	r30, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <LCDsendCommand+0x22>
 222:	00 c0       	rjmp	.+0      	; 0x224 <LCDsendCommand+0x28>
 224:	00 00       	nop
 226:	f0 e1       	ldi	r31, 0x10	; 16
 228:	8f 9f       	mul	r24, r31
 22a:	c0 01       	movw	r24, r0
 22c:	11 24       	eor	r1, r1
 22e:	8b b9       	out	0x0b, r24	; 11
 230:	8b b1       	in	r24, 0x0b	; 11
 232:	84 60       	ori	r24, 0x04	; 4
 234:	8b b9       	out	0x0b, r24	; 11
 236:	89 ef       	ldi	r24, 0xF9	; 249
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <LCDsendCommand+0x3e>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <LCDsendCommand+0x44>
 240:	00 00       	nop
 242:	8b b1       	in	r24, 0x0b	; 11
 244:	8b 7f       	andi	r24, 0xFB	; 251
 246:	8b b9       	out	0x0b, r24	; 11
 248:	e9 ef       	ldi	r30, 0xF9	; 249
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	31 97       	sbiw	r30, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <LCDsendCommand+0x50>
 250:	00 c0       	rjmp	.+0      	; 0x252 <LCDsendCommand+0x56>
 252:	00 00       	nop
 254:	08 95       	ret

00000256 <LCDclr>:
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LCDsendCommand>
 25c:	08 95       	ret

0000025e <LCDhome>:
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LCDsendCommand>
 264:	08 95       	ret

00000266 <LCDstring>:
 266:	0f 93       	push	r16
 268:	1f 93       	push	r17
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	00 97       	sbiw	r24, 0x00	; 0
 270:	69 f0       	breq	.+26     	; 0x28c <LCDstring+0x26>
 272:	d6 2f       	mov	r29, r22
 274:	8c 01       	movw	r16, r24
 276:	c0 e0       	ldi	r28, 0x00	; 0
 278:	07 c0       	rjmp	.+14     	; 0x288 <LCDstring+0x22>
 27a:	f8 01       	movw	r30, r16
 27c:	ec 0f       	add	r30, r28
 27e:	f1 1d       	adc	r31, r1
 280:	80 81       	ld	r24, Z
 282:	0e 94 cd 00 	call	0x19a	; 0x19a <LCDsendChar>
 286:	cf 5f       	subi	r28, 0xFF	; 255
 288:	cd 17       	cp	r28, r29
 28a:	b8 f3       	brcs	.-18     	; 0x27a <LCDstring+0x14>
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	1f 91       	pop	r17
 292:	0f 91       	pop	r16
 294:	08 95       	ret

00000296 <LCDdefinechar>:
 296:	ef 92       	push	r14
 298:	ff 92       	push	r15
 29a:	0f 93       	push	r16
 29c:	1f 93       	push	r17
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	7c 01       	movw	r14, r24
 2a4:	86 2f       	mov	r24, r22
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	80 64       	ori	r24, 0x40	; 64
 2b6:	c0 e0       	ldi	r28, 0x00	; 0
 2b8:	d0 e0       	ldi	r29, 0x00	; 0
 2ba:	0d c0       	rjmp	.+26     	; 0x2d6 <LCDdefinechar+0x40>
 2bc:	f7 01       	movw	r30, r14
 2be:	ec 0f       	add	r30, r28
 2c0:	fd 1f       	adc	r31, r29
 2c2:	14 91       	lpm	r17, Z
 2c4:	01 e0       	ldi	r16, 0x01	; 1
 2c6:	08 0f       	add	r16, r24
 2c8:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LCDsendCommand>
 2cc:	81 2f       	mov	r24, r17
 2ce:	0e 94 cd 00 	call	0x19a	; 0x19a <LCDsendChar>
 2d2:	21 96       	adiw	r28, 0x01	; 1
 2d4:	80 2f       	mov	r24, r16
 2d6:	c8 30       	cpi	r28, 0x08	; 8
 2d8:	d1 05       	cpc	r29, r1
 2da:	80 f3       	brcs	.-32     	; 0x2bc <LCDdefinechar+0x26>
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	1f 91       	pop	r17
 2e2:	0f 91       	pop	r16
 2e4:	ff 90       	pop	r15
 2e6:	ef 90       	pop	r14
 2e8:	08 95       	ret

000002ea <LCDinit>:
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	85 ea       	ldi	r24, 0xA5	; 165
 2f0:	9e e0       	ldi	r25, 0x0E	; 14
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <LCDinit+0x8>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <LCDinit+0xe>
 2f8:	00 00       	nop
 2fa:	1b b8       	out	0x0b, r1	; 11
 2fc:	1b b8       	out	0x0b, r1	; 11
 2fe:	8a b1       	in	r24, 0x0a	; 10
 300:	80 6f       	ori	r24, 0xF0	; 240
 302:	8a b9       	out	0x0a, r24	; 10
 304:	8a b1       	in	r24, 0x0a	; 10
 306:	87 60       	ori	r24, 0x07	; 7
 308:	8a b9       	out	0x0a, r24	; 10
 30a:	90 e3       	ldi	r25, 0x30	; 48
 30c:	9b b9       	out	0x0b, r25	; 11
 30e:	8b b1       	in	r24, 0x0b	; 11
 310:	84 60       	ori	r24, 0x04	; 4
 312:	8b b9       	out	0x0b, r24	; 11
 314:	e9 ef       	ldi	r30, 0xF9	; 249
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	31 97       	sbiw	r30, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <LCDinit+0x2e>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <LCDinit+0x34>
 31e:	00 00       	nop
 320:	8b b1       	in	r24, 0x0b	; 11
 322:	8b 7f       	andi	r24, 0xFB	; 251
 324:	8b b9       	out	0x0b, r24	; 11
 326:	e9 ef       	ldi	r30, 0xF9	; 249
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	31 97       	sbiw	r30, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <LCDinit+0x40>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <LCDinit+0x46>
 330:	00 00       	nop
 332:	9b b9       	out	0x0b, r25	; 11
 334:	8b b1       	in	r24, 0x0b	; 11
 336:	84 60       	ori	r24, 0x04	; 4
 338:	8b b9       	out	0x0b, r24	; 11
 33a:	89 ef       	ldi	r24, 0xF9	; 249
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <LCDinit+0x54>
 342:	00 c0       	rjmp	.+0      	; 0x344 <LCDinit+0x5a>
 344:	00 00       	nop
 346:	8b b1       	in	r24, 0x0b	; 11
 348:	8b 7f       	andi	r24, 0xFB	; 251
 34a:	8b b9       	out	0x0b, r24	; 11
 34c:	e9 ef       	ldi	r30, 0xF9	; 249
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	31 97       	sbiw	r30, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <LCDinit+0x66>
 354:	00 c0       	rjmp	.+0      	; 0x356 <LCDinit+0x6c>
 356:	00 00       	nop
 358:	80 e2       	ldi	r24, 0x20	; 32
 35a:	8b b9       	out	0x0b, r24	; 11
 35c:	8b b1       	in	r24, 0x0b	; 11
 35e:	84 60       	ori	r24, 0x04	; 4
 360:	8b b9       	out	0x0b, r24	; 11
 362:	89 ef       	ldi	r24, 0xF9	; 249
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	01 97       	sbiw	r24, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <LCDinit+0x7c>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <LCDinit+0x82>
 36c:	00 00       	nop
 36e:	8b b1       	in	r24, 0x0b	; 11
 370:	8b 7f       	andi	r24, 0xFB	; 251
 372:	8b b9       	out	0x0b, r24	; 11
 374:	e9 ef       	ldi	r30, 0xF9	; 249
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	31 97       	sbiw	r30, 0x01	; 1
 37a:	f1 f7       	brne	.-4      	; 0x378 <LCDinit+0x8e>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <LCDinit+0x94>
 37e:	00 00       	nop
 380:	88 e2       	ldi	r24, 0x28	; 40
 382:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LCDsendCommand>
 386:	8c e0       	ldi	r24, 0x0C	; 12
 388:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LCDsendCommand>
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	c0 e0       	ldi	r28, 0x00	; 0
 390:	0a c0       	rjmp	.+20     	; 0x3a6 <LCDinit+0xbc>
 392:	d1 e0       	ldi	r29, 0x01	; 1
 394:	d6 0f       	add	r29, r22
 396:	8c 2f       	mov	r24, r28
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	88 59       	subi	r24, 0x98	; 152
 39c:	9f 4f       	sbci	r25, 0xFF	; 255
 39e:	0e 94 4b 01 	call	0x296	; 0x296 <LCDdefinechar>
 3a2:	c8 5f       	subi	r28, 0xF8	; 248
 3a4:	6d 2f       	mov	r22, r29
 3a6:	c0 34       	cpi	r28, 0x40	; 64
 3a8:	a0 f3       	brcs	.-24     	; 0x392 <LCDinit+0xa8>
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <LCD_Init>:

void LCD_Init() {
	LCDinit();
 3b0:	0e 94 75 01 	call	0x2ea	; 0x2ea <LCDinit>
	LCDclr();
 3b4:	0e 94 2b 01 	call	0x256	; 0x256 <LCDclr>
	LCDhome();
 3b8:	0e 94 2f 01 	call	0x25e	; 0x25e <LCDhome>
 3bc:	08 95       	ret

000003be <LCD_Update>:
}

void LCD_Update(){
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
 3c6:	67 97       	sbiw	r28, 0x17	; 23
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	f8 94       	cli
 3cc:	de bf       	out	0x3e, r29	; 62
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	cd bf       	out	0x3d, r28	; 61
	char Temp_string[] = "Temp: 00.0 C";
 3d2:	8d e0       	ldi	r24, 0x0D	; 13
 3d4:	eb e0       	ldi	r30, 0x0B	; 11
 3d6:	f1 e0       	ldi	r31, 0x01	; 1
 3d8:	de 01       	movw	r26, r28
 3da:	11 96       	adiw	r26, 0x01	; 1
 3dc:	01 90       	ld	r0, Z+
 3de:	0d 92       	st	X+, r0
 3e0:	8a 95       	dec	r24
 3e2:	e1 f7       	brne	.-8      	; 0x3dc <LCD_Update+0x1e>
	char CHARMAP[10]={'0','1','2','3','4','5','6','7','8','9'};
 3e4:	8a e0       	ldi	r24, 0x0A	; 10
 3e6:	e1 e0       	ldi	r30, 0x01	; 1
 3e8:	f1 e0       	ldi	r31, 0x01	; 1
 3ea:	de 01       	movw	r26, r28
 3ec:	1e 96       	adiw	r26, 0x0e	; 14
 3ee:	01 90       	ld	r0, Z+
 3f0:	0d 92       	st	X+, r0
 3f2:	8a 95       	dec	r24
 3f4:	e1 f7       	brne	.-8      	; 0x3ee <LCD_Update+0x30>
	Temp_string[6] = CHARMAP[temp/100] ; // decena
 3f6:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__data_end>
 3fa:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__data_end+0x1>
 3fe:	36 95       	lsr	r19
 400:	27 95       	ror	r18
 402:	36 95       	lsr	r19
 404:	27 95       	ror	r18
 406:	ab e7       	ldi	r26, 0x7B	; 123
 408:	b4 e1       	ldi	r27, 0x14	; 20
 40a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__umulhisi3>
 40e:	96 95       	lsr	r25
 410:	87 95       	ror	r24
 412:	ee e0       	ldi	r30, 0x0E	; 14
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	ec 0f       	add	r30, r28
 418:	fd 1f       	adc	r31, r29
 41a:	e8 0f       	add	r30, r24
 41c:	f9 1f       	adc	r31, r25
 41e:	80 81       	ld	r24, Z
 420:	8f 83       	std	Y+7, r24	; 0x07
	Temp_string[7] = CHARMAP[(temp/10)%10]; // unidad
 422:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__data_end>
 426:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__data_end+0x1>
 42a:	ad ec       	ldi	r26, 0xCD	; 205
 42c:	bc ec       	ldi	r27, 0xCC	; 204
 42e:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__umulhisi3>
 432:	ac 01       	movw	r20, r24
 434:	56 95       	lsr	r21
 436:	47 95       	ror	r20
 438:	56 95       	lsr	r21
 43a:	47 95       	ror	r20
 43c:	56 95       	lsr	r21
 43e:	47 95       	ror	r20
 440:	9a 01       	movw	r18, r20
 442:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__umulhisi3>
 446:	96 95       	lsr	r25
 448:	87 95       	ror	r24
 44a:	96 95       	lsr	r25
 44c:	87 95       	ror	r24
 44e:	96 95       	lsr	r25
 450:	87 95       	ror	r24
 452:	9c 01       	movw	r18, r24
 454:	22 0f       	add	r18, r18
 456:	33 1f       	adc	r19, r19
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	82 0f       	add	r24, r18
 466:	93 1f       	adc	r25, r19
 468:	9a 01       	movw	r18, r20
 46a:	28 1b       	sub	r18, r24
 46c:	39 0b       	sbc	r19, r25
 46e:	ee e0       	ldi	r30, 0x0E	; 14
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	ec 0f       	add	r30, r28
 474:	fd 1f       	adc	r31, r29
 476:	e2 0f       	add	r30, r18
 478:	f3 1f       	adc	r31, r19
 47a:	80 81       	ld	r24, Z
 47c:	88 87       	std	Y+8, r24	; 0x08
	Temp_string[9] = CHARMAP[temp%10]; // decimal
 47e:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <__data_end>
 482:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <__data_end+0x1>
 486:	9a 01       	movw	r18, r20
 488:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__umulhisi3>
 48c:	96 95       	lsr	r25
 48e:	87 95       	ror	r24
 490:	96 95       	lsr	r25
 492:	87 95       	ror	r24
 494:	96 95       	lsr	r25
 496:	87 95       	ror	r24
 498:	9c 01       	movw	r18, r24
 49a:	22 0f       	add	r18, r18
 49c:	33 1f       	adc	r19, r19
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	88 0f       	add	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	82 0f       	add	r24, r18
 4ac:	93 1f       	adc	r25, r19
 4ae:	9a 01       	movw	r18, r20
 4b0:	28 1b       	sub	r18, r24
 4b2:	39 0b       	sbc	r19, r25
 4b4:	ee e0       	ldi	r30, 0x0E	; 14
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	ec 0f       	add	r30, r28
 4ba:	fd 1f       	adc	r31, r29
 4bc:	e2 0f       	add	r30, r18
 4be:	f3 1f       	adc	r31, r19
 4c0:	80 81       	ld	r24, Z
 4c2:	8a 87       	std	Y+10, r24	; 0x0a
	LCDstring(Temp_string, 12);
 4c4:	6c e0       	ldi	r22, 0x0C	; 12
 4c6:	ce 01       	movw	r24, r28
 4c8:	01 96       	adiw	r24, 0x01	; 1
 4ca:	0e 94 33 01 	call	0x266	; 0x266 <LCDstring>
	LCDhome();
 4ce:	0e 94 2f 01 	call	0x25e	; 0x25e <LCDhome>
}
 4d2:	67 96       	adiw	r28, 0x17	; 23
 4d4:	0f b6       	in	r0, 0x3f	; 63
 4d6:	f8 94       	cli
 4d8:	de bf       	out	0x3e, r29	; 62
 4da:	0f be       	out	0x3f, r0	; 63
 4dc:	cd bf       	out	0x3d, r28	; 61
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	08 95       	ret

000004e4 <SEOSTimer0Init>:

void SEOSSChedulerTasks();


void SEOSTimer0Init(){
	OCR0A = 156; //Valor con el cual comparar
 4e4:	8c e9       	ldi	r24, 0x9C	; 156
 4e6:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1<<WGM01);// = 0b00000010; Modo CTC
 4e8:	82 e0       	ldi	r24, 0x02	; 2
 4ea:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS02)|(1<<CS00); // = 0b00000101; clk/1024 (From Prescaler) 16MHz/1024 =  15625 Hz
 4ec:	95 e0       	ldi	r25, 0x05	; 5
 4ee:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = (1<<OCIE0A); // Habilita el comparador. T=156/15625 Hz = 9.984ms ~= 10 ms
 4f0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	sei();
 4f4:	78 94       	sei
 4f6:	08 95       	ret

000004f8 <SEOSDispatcherTasks>:
}


void SEOSDispatcherTasks(){
	if(ADC_Flag){
 4f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4fc:	88 23       	and	r24, r24
 4fe:	21 f0       	breq	.+8      	; 0x508 <SEOSDispatcherTasks+0x10>
		ADC_Update();
 500:	0e 94 9f 00 	call	0x13e	; 0x13e <ADC_Update>
		ADC_Flag = 0;
 504:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if(LCD_Flag){
 508:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <LCD_Flag>
 50c:	88 23       	and	r24, r24
 50e:	21 f0       	breq	.+8      	; 0x518 <SEOSDispatcherTasks+0x20>
		LCD_Update();
 510:	0e 94 df 01 	call	0x3be	; 0x3be <LCD_Update>
		LCD_Flag = 0;
 514:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <LCD_Flag>
 518:	08 95       	ret

0000051a <SEOSSChedulerTasks>:
}

void SEOSSChedulerTasks(){
	static char adcCont=0, lcdCount=0;
	
	if(++adcCont==50)
 51a:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <adcCont.1799>
 51e:	8f 5f       	subi	r24, 0xFF	; 255
 520:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <adcCont.1799>
 524:	82 33       	cpi	r24, 0x32	; 50
 526:	29 f4       	brne	.+10     	; 0x532 <SEOSSChedulerTasks+0x18>
	{
		ADC_Flag = 1;
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		adcCont=0;
 52e:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <adcCont.1799>
	}
	if(++lcdCount==50){
 532:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <lcdCount.1800>
 536:	8f 5f       	subi	r24, 0xFF	; 255
 538:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <lcdCount.1800>
 53c:	82 33       	cpi	r24, 0x32	; 50
 53e:	29 f4       	brne	.+10     	; 0x54a <SEOSSChedulerTasks+0x30>
		LCD_Flag=1;
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <LCD_Flag>
		lcdCount=0;
 546:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <lcdCount.1800>
 54a:	08 95       	ret

0000054c <__vector_14>:
		LCD_Flag = 0;
	}
}


ISR(TIMER0_COMPA_vect){
 54c:	1f 92       	push	r1
 54e:	0f 92       	push	r0
 550:	0f b6       	in	r0, 0x3f	; 63
 552:	0f 92       	push	r0
 554:	11 24       	eor	r1, r1
 556:	2f 93       	push	r18
 558:	3f 93       	push	r19
 55a:	4f 93       	push	r20
 55c:	5f 93       	push	r21
 55e:	6f 93       	push	r22
 560:	7f 93       	push	r23
 562:	8f 93       	push	r24
 564:	9f 93       	push	r25
 566:	af 93       	push	r26
 568:	bf 93       	push	r27
 56a:	ef 93       	push	r30
 56c:	ff 93       	push	r31
	SEOSSChedulerTasks();
 56e:	0e 94 8d 02 	call	0x51a	; 0x51a <SEOSSChedulerTasks>
}
 572:	ff 91       	pop	r31
 574:	ef 91       	pop	r30
 576:	bf 91       	pop	r27
 578:	af 91       	pop	r26
 57a:	9f 91       	pop	r25
 57c:	8f 91       	pop	r24
 57e:	7f 91       	pop	r23
 580:	6f 91       	pop	r22
 582:	5f 91       	pop	r21
 584:	4f 91       	pop	r20
 586:	3f 91       	pop	r19
 588:	2f 91       	pop	r18
 58a:	0f 90       	pop	r0
 58c:	0f be       	out	0x3f, r0	; 63
 58e:	0f 90       	pop	r0
 590:	1f 90       	pop	r1
 592:	18 95       	reti

00000594 <main>:


int main(void)
{
	
	DDRB = 0x03;
 594:	83 e0       	ldi	r24, 0x03	; 3
 596:	84 b9       	out	0x04, r24	; 4
	DIDR0= 0x01;
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	ADC_init();	
 59e:	0e 94 73 00 	call	0xe6	; 0xe6 <ADC_init>
	LCD_Init();
 5a2:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LCD_Init>
	SEOSTimer0Init();
 5a6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <SEOSTimer0Init>
			
    while (1) 
    {
		SEOSDispatcherTasks();
 5aa:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <SEOSDispatcherTasks>
 5ae:	fd cf       	rjmp	.-6      	; 0x5aa <main+0x16>

000005b0 <__udivmodsi4>:
 5b0:	a1 e2       	ldi	r26, 0x21	; 33
 5b2:	1a 2e       	mov	r1, r26
 5b4:	aa 1b       	sub	r26, r26
 5b6:	bb 1b       	sub	r27, r27
 5b8:	fd 01       	movw	r30, r26
 5ba:	0d c0       	rjmp	.+26     	; 0x5d6 <__udivmodsi4_ep>

000005bc <__udivmodsi4_loop>:
 5bc:	aa 1f       	adc	r26, r26
 5be:	bb 1f       	adc	r27, r27
 5c0:	ee 1f       	adc	r30, r30
 5c2:	ff 1f       	adc	r31, r31
 5c4:	a2 17       	cp	r26, r18
 5c6:	b3 07       	cpc	r27, r19
 5c8:	e4 07       	cpc	r30, r20
 5ca:	f5 07       	cpc	r31, r21
 5cc:	20 f0       	brcs	.+8      	; 0x5d6 <__udivmodsi4_ep>
 5ce:	a2 1b       	sub	r26, r18
 5d0:	b3 0b       	sbc	r27, r19
 5d2:	e4 0b       	sbc	r30, r20
 5d4:	f5 0b       	sbc	r31, r21

000005d6 <__udivmodsi4_ep>:
 5d6:	66 1f       	adc	r22, r22
 5d8:	77 1f       	adc	r23, r23
 5da:	88 1f       	adc	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	1a 94       	dec	r1
 5e0:	69 f7       	brne	.-38     	; 0x5bc <__udivmodsi4_loop>
 5e2:	60 95       	com	r22
 5e4:	70 95       	com	r23
 5e6:	80 95       	com	r24
 5e8:	90 95       	com	r25
 5ea:	9b 01       	movw	r18, r22
 5ec:	ac 01       	movw	r20, r24
 5ee:	bd 01       	movw	r22, r26
 5f0:	cf 01       	movw	r24, r30
 5f2:	08 95       	ret

000005f4 <__umulhisi3>:
 5f4:	a2 9f       	mul	r26, r18
 5f6:	b0 01       	movw	r22, r0
 5f8:	b3 9f       	mul	r27, r19
 5fa:	c0 01       	movw	r24, r0
 5fc:	a3 9f       	mul	r26, r19
 5fe:	70 0d       	add	r23, r0
 600:	81 1d       	adc	r24, r1
 602:	11 24       	eor	r1, r1
 604:	91 1d       	adc	r25, r1
 606:	b2 9f       	mul	r27, r18
 608:	70 0d       	add	r23, r0
 60a:	81 1d       	adc	r24, r1
 60c:	11 24       	eor	r1, r1
 60e:	91 1d       	adc	r25, r1
 610:	08 95       	ret

00000612 <_exit>:
 612:	f8 94       	cli

00000614 <__stop_program>:
 614:	ff cf       	rjmp	.-2      	; 0x614 <__stop_program>
