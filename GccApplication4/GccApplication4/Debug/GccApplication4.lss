
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000009b6  00000a4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800118  00800118  00000a62  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a62  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000157a  00000000  00000000  00000c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a7d  00000000  00000000  0000219e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bae  00000000  00000000  00002c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000034c  00000000  00000000  000037cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000060c  00000000  00000000  00003b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e8e  00000000  00000000  00004124  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004fb2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  2c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  38:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__vector_14>
  3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  48:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>

00000068 <LcdCustomChar>:
  68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	e6 eb       	ldi	r30, 0xB6	; 182
  bc:	f9 e0       	ldi	r31, 0x09	; 9
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a8 31       	cpi	r26, 0x18	; 24
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>

000000ca <__do_clear_bss>:
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	a8 e1       	ldi	r26, 0x18	; 24
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
  d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
  d4:	a1 32       	cpi	r26, 0x21	; 33
  d6:	b2 07       	cpc	r27, r18
  d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
  da:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <main>
  de:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <_exit>

000000e2 <__bad_interrupt>:
  e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e6 <ADC_init>:
volatile float tempfloat = 0; /* numero de 32 bits que indica el valor de la temperatura con decimales */


void ADC_init()
{
	ADMUX= 0b00000000; // Vref=AVCC, bit justificados a derecho, ADC0/PC0 pin de lectura
  e6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

	// Divisor de frecuencia = 128 -> 16000KHz/128 = 125 KHz 
	ADCSRA |= (1<<ADPS0);
  ea:	ea e7       	ldi	r30, 0x7A	; 122
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	81 60       	ori	r24, 0x01	; 1
  f2:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS1);
  f4:	80 81       	ld	r24, Z
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2);
  fa:	80 81       	ld	r24, Z
  fc:	84 60       	ori	r24, 0x04	; 4
  fe:	80 83       	st	Z, r24
 100:	08 95       	ret

00000102 <ADC_GetData>:
}

int ADC_GetData()
{	
	// Encendemos el ADC
	ADCSRA |= (1<<ADEN);
 102:	ea e7       	ldi	r30, 0x7A	; 122
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	83 e0       	ldi	r24, 0x03	; 3
 10e:	8a 95       	dec	r24
 110:	f1 f7       	brne	.-4      	; 0x10e <ADC_GetData+0xc>
 112:	00 00       	nop
	_delay_us(10);	// Esperamos a que caliente

	// Mandamos el muestreo
	ADCSRA |= (1<<ADSC);
 114:	80 81       	ld	r24, Z
 116:	80 64       	ori	r24, 0x40	; 64
 118:	80 83       	st	Z, r24

	// Esperamos a que muestree, leyendo el flag
	while( !(ADCSRA & (1<<ADIF)) );
 11a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 11e:	84 ff       	sbrs	r24, 4
 120:	fc cf       	rjmp	.-8      	; 0x11a <ADC_GetData+0x18>
	ADCSRA |= (1<<ADIF);	// Reiniciamos el flag
 122:	ea e7       	ldi	r30, 0x7A	; 122
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	80 61       	ori	r24, 0x10	; 16
 12a:	80 83       	st	Z, r24

	// Apagamos el ADC
	ADCSRA &=~ (1<<ADEN);
 12c:	80 81       	ld	r24, Z
 12e:	8f 77       	andi	r24, 0x7F	; 127
 130:	80 83       	st	Z, r24

	return ADC; //Retornamos el valor del registro ADC 
 132:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 136:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 13a:	08 95       	ret

0000013c <ADC_Update>:

void ADC_Update(){
	sensor = ADC_GetData(); //Leo el valor del registro de ADC0
 13c:	0e 94 81 00 	call	0x102	; 0x102 <ADC_GetData>
 140:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <sensor+0x1>
 144:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <sensor>
	tempfloat = (sensor * 5000.0f / 1024.0f) / 10.0f; //Valor de voltaje medido en mV se obtiene mediante la ecucacion Vmedido = (sensor * 5000mV) / 2^10.
 148:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <sensor>
 14c:	70 91 20 01 	lds	r23, 0x0120	; 0x800120 <sensor+0x1>
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 8d 03 	call	0x71a	; 0x71a <__floatunsisf>
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e4       	ldi	r19, 0x40	; 64
 15c:	4c e9       	ldi	r20, 0x9C	; 156
 15e:	55 e4       	ldi	r21, 0x45	; 69
 160:	0e 94 44 04 	call	0x888	; 0x888 <__mulsf3>
 164:	20 e0       	ldi	r18, 0x00	; 0
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	40 e8       	ldi	r20, 0x80	; 128
 16a:	5a e3       	ldi	r21, 0x3A	; 58
 16c:	0e 94 44 04 	call	0x888	; 0x888 <__mulsf3>
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	40 e2       	ldi	r20, 0x20	; 32
 176:	51 e4       	ldi	r21, 0x41	; 65
 178:	0e 94 e5 02 	call	0x5ca	; 0x5ca <__divsf3>
 17c:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <__data_end>
 180:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <__data_end+0x1>
 184:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end+0x2>
 188:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x3>
												//Al dividir dicho voltaje en por 10 obtenemos la temperatura.
	if (tempfloat > 24)
 18c:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <__data_end>
 190:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <__data_end+0x1>
 194:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end+0x2>
 198:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x3>
 19c:	20 e0       	ldi	r18, 0x00	; 0
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	40 ec       	ldi	r20, 0xC0	; 192
 1a2:	51 e4       	ldi	r21, 0x41	; 65
 1a4:	0e 94 3f 04 	call	0x87e	; 0x87e <__gesf2>
 1a8:	18 16       	cp	r1, r24
 1aa:	1c f4       	brge	.+6      	; 0x1b2 <ADC_Update+0x76>
	{
		PORTB = (0b00000001);
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	85 b9       	out	0x05, r24	; 5
 1b0:	08 95       	ret
	}
	else
	{
		if (tempfloat < 17)
 1b2:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <__data_end>
 1b6:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <__data_end+0x1>
 1ba:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end+0x2>
 1be:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x3>
 1c2:	20 e0       	ldi	r18, 0x00	; 0
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	48 e8       	ldi	r20, 0x88	; 136
 1c8:	51 e4       	ldi	r21, 0x41	; 65
 1ca:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__cmpsf2>
 1ce:	88 23       	and	r24, r24
 1d0:	1c f4       	brge	.+6      	; 0x1d8 <ADC_Update+0x9c>
		{
			PORTB = (0b00000010);			
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	85 b9       	out	0x05, r24	; 5
 1d6:	08 95       	ret
		}
		else
		{
			PORTB = 0b00000000;
 1d8:	15 b8       	out	0x05, r1	; 5
 1da:	08 95       	ret

000001dc <LCDsendChar>:
		}
		
		// write character to display
		LCDsendChar(c);
	}	
}
 1dc:	98 2f       	mov	r25, r24
 1de:	90 7f       	andi	r25, 0xF0	; 240
 1e0:	9b b9       	out	0x0b, r25	; 11
 1e2:	9b b1       	in	r25, 0x0b	; 11
 1e4:	91 60       	ori	r25, 0x01	; 1
 1e6:	9b b9       	out	0x0b, r25	; 11
 1e8:	9b b1       	in	r25, 0x0b	; 11
 1ea:	94 60       	ori	r25, 0x04	; 4
 1ec:	9b b9       	out	0x0b, r25	; 11
 1ee:	2d e0       	ldi	r18, 0x0D	; 13
 1f0:	2a 95       	dec	r18
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <LCDsendChar+0x14>
 1f4:	00 00       	nop
 1f6:	9b b1       	in	r25, 0x0b	; 11
 1f8:	9b 7f       	andi	r25, 0xFB	; 251
 1fa:	9b b9       	out	0x0b, r25	; 11
 1fc:	9b b1       	in	r25, 0x0b	; 11
 1fe:	9e 7f       	andi	r25, 0xFE	; 254
 200:	9b b9       	out	0x0b, r25	; 11
 202:	9d e0       	ldi	r25, 0x0D	; 13
 204:	9a 95       	dec	r25
 206:	f1 f7       	brne	.-4      	; 0x204 <LCDsendChar+0x28>
 208:	00 00       	nop
 20a:	20 e1       	ldi	r18, 0x10	; 16
 20c:	82 9f       	mul	r24, r18
 20e:	c0 01       	movw	r24, r0
 210:	11 24       	eor	r1, r1
 212:	8b b9       	out	0x0b, r24	; 11
 214:	8b b1       	in	r24, 0x0b	; 11
 216:	81 60       	ori	r24, 0x01	; 1
 218:	8b b9       	out	0x0b, r24	; 11
 21a:	8b b1       	in	r24, 0x0b	; 11
 21c:	84 60       	ori	r24, 0x04	; 4
 21e:	8b b9       	out	0x0b, r24	; 11
 220:	8d e0       	ldi	r24, 0x0D	; 13
 222:	8a 95       	dec	r24
 224:	f1 f7       	brne	.-4      	; 0x222 <LCDsendChar+0x46>
 226:	00 00       	nop
 228:	8b b1       	in	r24, 0x0b	; 11
 22a:	8b 7f       	andi	r24, 0xFB	; 251
 22c:	8b b9       	out	0x0b, r24	; 11
 22e:	8b b1       	in	r24, 0x0b	; 11
 230:	8e 7f       	andi	r24, 0xFE	; 254
 232:	8b b9       	out	0x0b, r24	; 11
 234:	9d e0       	ldi	r25, 0x0D	; 13
 236:	9a 95       	dec	r25
 238:	f1 f7       	brne	.-4      	; 0x236 <LCDsendChar+0x5a>
 23a:	00 00       	nop
 23c:	08 95       	ret

0000023e <LCDsendCommand>:
 23e:	98 2f       	mov	r25, r24
 240:	90 7f       	andi	r25, 0xF0	; 240
 242:	9b b9       	out	0x0b, r25	; 11
 244:	9b b1       	in	r25, 0x0b	; 11
 246:	94 60       	ori	r25, 0x04	; 4
 248:	9b b9       	out	0x0b, r25	; 11
 24a:	e9 ef       	ldi	r30, 0xF9	; 249
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	31 97       	sbiw	r30, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <LCDsendCommand+0x10>
 252:	00 c0       	rjmp	.+0      	; 0x254 <LCDsendCommand+0x16>
 254:	00 00       	nop
 256:	9b b1       	in	r25, 0x0b	; 11
 258:	9b 7f       	andi	r25, 0xFB	; 251
 25a:	9b b9       	out	0x0b, r25	; 11
 25c:	e9 ef       	ldi	r30, 0xF9	; 249
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	31 97       	sbiw	r30, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <LCDsendCommand+0x22>
 264:	00 c0       	rjmp	.+0      	; 0x266 <LCDsendCommand+0x28>
 266:	00 00       	nop
 268:	f0 e1       	ldi	r31, 0x10	; 16
 26a:	8f 9f       	mul	r24, r31
 26c:	c0 01       	movw	r24, r0
 26e:	11 24       	eor	r1, r1
 270:	8b b9       	out	0x0b, r24	; 11
 272:	8b b1       	in	r24, 0x0b	; 11
 274:	84 60       	ori	r24, 0x04	; 4
 276:	8b b9       	out	0x0b, r24	; 11
 278:	89 ef       	ldi	r24, 0xF9	; 249
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <LCDsendCommand+0x3e>
 280:	00 c0       	rjmp	.+0      	; 0x282 <LCDsendCommand+0x44>
 282:	00 00       	nop
 284:	8b b1       	in	r24, 0x0b	; 11
 286:	8b 7f       	andi	r24, 0xFB	; 251
 288:	8b b9       	out	0x0b, r24	; 11
 28a:	e9 ef       	ldi	r30, 0xF9	; 249
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	31 97       	sbiw	r30, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <LCDsendCommand+0x50>
 292:	00 c0       	rjmp	.+0      	; 0x294 <LCDsendCommand+0x56>
 294:	00 00       	nop
 296:	08 95       	ret

00000298 <LCDclr>:
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 1f 01 	call	0x23e	; 0x23e <LCDsendCommand>
 29e:	08 95       	ret

000002a0 <LCDhome>:
 2a0:	82 e0       	ldi	r24, 0x02	; 2
 2a2:	0e 94 1f 01 	call	0x23e	; 0x23e <LCDsendCommand>
 2a6:	08 95       	ret

000002a8 <LCDstring>:
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	00 97       	sbiw	r24, 0x00	; 0
 2b2:	69 f0       	breq	.+26     	; 0x2ce <LCDstring+0x26>
 2b4:	d6 2f       	mov	r29, r22
 2b6:	8c 01       	movw	r16, r24
 2b8:	c0 e0       	ldi	r28, 0x00	; 0
 2ba:	07 c0       	rjmp	.+14     	; 0x2ca <LCDstring+0x22>
 2bc:	f8 01       	movw	r30, r16
 2be:	ec 0f       	add	r30, r28
 2c0:	f1 1d       	adc	r31, r1
 2c2:	80 81       	ld	r24, Z
 2c4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCDsendChar>
 2c8:	cf 5f       	subi	r28, 0xFF	; 255
 2ca:	cd 17       	cp	r28, r29
 2cc:	b8 f3       	brcs	.-18     	; 0x2bc <LCDstring+0x14>
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	1f 91       	pop	r17
 2d4:	0f 91       	pop	r16
 2d6:	08 95       	ret

000002d8 <LCDdefinechar>:
 2d8:	ef 92       	push	r14
 2da:	ff 92       	push	r15
 2dc:	0f 93       	push	r16
 2de:	1f 93       	push	r17
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	7c 01       	movw	r14, r24
 2e6:	86 2f       	mov	r24, r22
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	80 64       	ori	r24, 0x40	; 64
 2f8:	c0 e0       	ldi	r28, 0x00	; 0
 2fa:	d0 e0       	ldi	r29, 0x00	; 0
 2fc:	0d c0       	rjmp	.+26     	; 0x318 <LCDdefinechar+0x40>
 2fe:	f7 01       	movw	r30, r14
 300:	ec 0f       	add	r30, r28
 302:	fd 1f       	adc	r31, r29
 304:	14 91       	lpm	r17, Z
 306:	01 e0       	ldi	r16, 0x01	; 1
 308:	08 0f       	add	r16, r24
 30a:	0e 94 1f 01 	call	0x23e	; 0x23e <LCDsendCommand>
 30e:	81 2f       	mov	r24, r17
 310:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCDsendChar>
 314:	21 96       	adiw	r28, 0x01	; 1
 316:	80 2f       	mov	r24, r16
 318:	c8 30       	cpi	r28, 0x08	; 8
 31a:	d1 05       	cpc	r29, r1
 31c:	80 f3       	brcs	.-32     	; 0x2fe <LCDdefinechar+0x26>
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	1f 91       	pop	r17
 324:	0f 91       	pop	r16
 326:	ff 90       	pop	r15
 328:	ef 90       	pop	r14
 32a:	08 95       	ret

0000032c <LCDinit>:
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	85 ea       	ldi	r24, 0xA5	; 165
 332:	9e e0       	ldi	r25, 0x0E	; 14
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <LCDinit+0x8>
 338:	00 c0       	rjmp	.+0      	; 0x33a <LCDinit+0xe>
 33a:	00 00       	nop
 33c:	1b b8       	out	0x0b, r1	; 11
 33e:	1b b8       	out	0x0b, r1	; 11
 340:	8a b1       	in	r24, 0x0a	; 10
 342:	80 6f       	ori	r24, 0xF0	; 240
 344:	8a b9       	out	0x0a, r24	; 10
 346:	8a b1       	in	r24, 0x0a	; 10
 348:	87 60       	ori	r24, 0x07	; 7
 34a:	8a b9       	out	0x0a, r24	; 10
 34c:	90 e3       	ldi	r25, 0x30	; 48
 34e:	9b b9       	out	0x0b, r25	; 11
 350:	8b b1       	in	r24, 0x0b	; 11
 352:	84 60       	ori	r24, 0x04	; 4
 354:	8b b9       	out	0x0b, r24	; 11
 356:	e9 ef       	ldi	r30, 0xF9	; 249
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	31 97       	sbiw	r30, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <LCDinit+0x2e>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <LCDinit+0x34>
 360:	00 00       	nop
 362:	8b b1       	in	r24, 0x0b	; 11
 364:	8b 7f       	andi	r24, 0xFB	; 251
 366:	8b b9       	out	0x0b, r24	; 11
 368:	e9 ef       	ldi	r30, 0xF9	; 249
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	31 97       	sbiw	r30, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <LCDinit+0x40>
 370:	00 c0       	rjmp	.+0      	; 0x372 <LCDinit+0x46>
 372:	00 00       	nop
 374:	9b b9       	out	0x0b, r25	; 11
 376:	8b b1       	in	r24, 0x0b	; 11
 378:	84 60       	ori	r24, 0x04	; 4
 37a:	8b b9       	out	0x0b, r24	; 11
 37c:	89 ef       	ldi	r24, 0xF9	; 249
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <LCDinit+0x54>
 384:	00 c0       	rjmp	.+0      	; 0x386 <LCDinit+0x5a>
 386:	00 00       	nop
 388:	8b b1       	in	r24, 0x0b	; 11
 38a:	8b 7f       	andi	r24, 0xFB	; 251
 38c:	8b b9       	out	0x0b, r24	; 11
 38e:	e9 ef       	ldi	r30, 0xF9	; 249
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	31 97       	sbiw	r30, 0x01	; 1
 394:	f1 f7       	brne	.-4      	; 0x392 <LCDinit+0x66>
 396:	00 c0       	rjmp	.+0      	; 0x398 <LCDinit+0x6c>
 398:	00 00       	nop
 39a:	80 e2       	ldi	r24, 0x20	; 32
 39c:	8b b9       	out	0x0b, r24	; 11
 39e:	8b b1       	in	r24, 0x0b	; 11
 3a0:	84 60       	ori	r24, 0x04	; 4
 3a2:	8b b9       	out	0x0b, r24	; 11
 3a4:	89 ef       	ldi	r24, 0xF9	; 249
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <LCDinit+0x7c>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <LCDinit+0x82>
 3ae:	00 00       	nop
 3b0:	8b b1       	in	r24, 0x0b	; 11
 3b2:	8b 7f       	andi	r24, 0xFB	; 251
 3b4:	8b b9       	out	0x0b, r24	; 11
 3b6:	e9 ef       	ldi	r30, 0xF9	; 249
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	31 97       	sbiw	r30, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <LCDinit+0x8e>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <LCDinit+0x94>
 3c0:	00 00       	nop
 3c2:	88 e2       	ldi	r24, 0x28	; 40
 3c4:	0e 94 1f 01 	call	0x23e	; 0x23e <LCDsendCommand>
 3c8:	8c e0       	ldi	r24, 0x0C	; 12
 3ca:	0e 94 1f 01 	call	0x23e	; 0x23e <LCDsendCommand>
 3ce:	60 e0       	ldi	r22, 0x00	; 0
 3d0:	c0 e0       	ldi	r28, 0x00	; 0
 3d2:	0a c0       	rjmp	.+20     	; 0x3e8 <LCDinit+0xbc>
 3d4:	d1 e0       	ldi	r29, 0x01	; 1
 3d6:	d6 0f       	add	r29, r22
 3d8:	8c 2f       	mov	r24, r28
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	88 59       	subi	r24, 0x98	; 152
 3de:	9f 4f       	sbci	r25, 0xFF	; 255
 3e0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCDdefinechar>
 3e4:	c8 5f       	subi	r28, 0xF8	; 248
 3e6:	6d 2f       	mov	r22, r29
 3e8:	c0 34       	cpi	r28, 0x40	; 64
 3ea:	a0 f3       	brcs	.-24     	; 0x3d4 <LCDinit+0xa8>
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	08 95       	ret

000003f2 <LCD_Init>:

void LCD_Init() {
	LCDinit();
 3f2:	0e 94 96 01 	call	0x32c	; 0x32c <LCDinit>
	LCDclr();
 3f6:	0e 94 4c 01 	call	0x298	; 0x298 <LCDclr>
	LCDhome();
 3fa:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCDhome>
 3fe:	08 95       	ret

00000400 <LCD_Update>:
}

void LCD_Update(){
 400:	0f 93       	push	r16
 402:	1f 93       	push	r17
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	cd b7       	in	r28, 0x3d	; 61
 40a:	de b7       	in	r29, 0x3e	; 62
 40c:	67 97       	sbiw	r28, 0x17	; 23
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	f8 94       	cli
 412:	de bf       	out	0x3e, r29	; 62
 414:	0f be       	out	0x3f, r0	; 63
 416:	cd bf       	out	0x3d, r28	; 61
	char Temp_string[] = "Temp: 00.0 C"; //Preparo la cadena de string a mostrar en el LCD
 418:	8d e0       	ldi	r24, 0x0D	; 13
 41a:	eb e0       	ldi	r30, 0x0B	; 11
 41c:	f1 e0       	ldi	r31, 0x01	; 1
 41e:	de 01       	movw	r26, r28
 420:	11 96       	adiw	r26, 0x01	; 1
 422:	01 90       	ld	r0, Z+
 424:	0d 92       	st	X+, r0
 426:	8a 95       	dec	r24
 428:	e1 f7       	brne	.-8      	; 0x422 <LCD_Update+0x22>
	char CHARMAP[10]={'0','1','2','3','4','5','6','7','8','9'};
 42a:	8a e0       	ldi	r24, 0x0A	; 10
 42c:	e1 e0       	ldi	r30, 0x01	; 1
 42e:	f1 e0       	ldi	r31, 0x01	; 1
 430:	de 01       	movw	r26, r28
 432:	1e 96       	adiw	r26, 0x0e	; 14
 434:	01 90       	ld	r0, Z+
 436:	0d 92       	st	X+, r0
 438:	8a 95       	dec	r24
 43a:	e1 f7       	brne	.-8      	; 0x434 <LCD_Update+0x34>
	Temp_string[6] = CHARMAP[(int)tempfloat/10]; // Obtengo la decena correspondiente al valor de temperatura
 43c:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <__data_end>
 440:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <__data_end+0x1>
 444:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end+0x2>
 448:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x3>
 44c:	0e 94 57 03 	call	0x6ae	; 0x6ae <__fixsfsi>
 450:	0a e0       	ldi	r16, 0x0A	; 10
 452:	10 e0       	ldi	r17, 0x00	; 0
 454:	cb 01       	movw	r24, r22
 456:	b8 01       	movw	r22, r16
 458:	0e 94 b1 04 	call	0x962	; 0x962 <__divmodhi4>
 45c:	ee e0       	ldi	r30, 0x0E	; 14
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	ec 0f       	add	r30, r28
 462:	fd 1f       	adc	r31, r29
 464:	e6 0f       	add	r30, r22
 466:	f7 1f       	adc	r31, r23
 468:	80 81       	ld	r24, Z
 46a:	8f 83       	std	Y+7, r24	; 0x07
	Temp_string[7] = CHARMAP[(int)tempfloat%10]; // Obtengo la unidad correspondiente al valor de temperatura
 46c:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <__data_end>
 470:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <__data_end+0x1>
 474:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end+0x2>
 478:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x3>
 47c:	0e 94 57 03 	call	0x6ae	; 0x6ae <__fixsfsi>
 480:	cb 01       	movw	r24, r22
 482:	b8 01       	movw	r22, r16
 484:	0e 94 b1 04 	call	0x962	; 0x962 <__divmodhi4>
 488:	ee e0       	ldi	r30, 0x0E	; 14
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	ec 0f       	add	r30, r28
 48e:	fd 1f       	adc	r31, r29
 490:	e8 0f       	add	r30, r24
 492:	f9 1f       	adc	r31, r25
 494:	80 81       	ld	r24, Z
 496:	88 87       	std	Y+8, r24	; 0x08
	Temp_string[9] = CHARMAP[(int)(tempfloat*10)%10]; // Obtengo el primer decimal correspondiente al valor de temperatura
 498:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <__data_end>
 49c:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <__data_end+0x1>
 4a0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end+0x2>
 4a4:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x3>
 4a8:	20 e0       	ldi	r18, 0x00	; 0
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	40 e2       	ldi	r20, 0x20	; 32
 4ae:	51 e4       	ldi	r21, 0x41	; 65
 4b0:	0e 94 44 04 	call	0x888	; 0x888 <__mulsf3>
 4b4:	0e 94 57 03 	call	0x6ae	; 0x6ae <__fixsfsi>
 4b8:	cb 01       	movw	r24, r22
 4ba:	b8 01       	movw	r22, r16
 4bc:	0e 94 b1 04 	call	0x962	; 0x962 <__divmodhi4>
 4c0:	ee e0       	ldi	r30, 0x0E	; 14
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	ec 0f       	add	r30, r28
 4c6:	fd 1f       	adc	r31, r29
 4c8:	e8 0f       	add	r30, r24
 4ca:	f9 1f       	adc	r31, r25
 4cc:	80 81       	ld	r24, Z
 4ce:	8a 87       	std	Y+10, r24	; 0x0a
	LCDstring(Temp_string, 12); //Muestro el mensaje en el LCD con la temperatura indicada 
 4d0:	6c e0       	ldi	r22, 0x0C	; 12
 4d2:	ce 01       	movw	r24, r28
 4d4:	01 96       	adiw	r24, 0x01	; 1
 4d6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCDstring>
	LCDhome();
 4da:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCDhome>
}
 4de:	67 96       	adiw	r28, 0x17	; 23
 4e0:	0f b6       	in	r0, 0x3f	; 63
 4e2:	f8 94       	cli
 4e4:	de bf       	out	0x3e, r29	; 62
 4e6:	0f be       	out	0x3f, r0	; 63
 4e8:	cd bf       	out	0x3d, r28	; 61
 4ea:	df 91       	pop	r29
 4ec:	cf 91       	pop	r28
 4ee:	1f 91       	pop	r17
 4f0:	0f 91       	pop	r16
 4f2:	08 95       	ret

000004f4 <SEOSTimer0Init>:

void SEOSSChedulerTasks();


void SEOSTimer0Init(){
	OCR0A = 156; //Valor con el cual comparar
 4f4:	8c e9       	ldi	r24, 0x9C	; 156
 4f6:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1<<WGM01);// = 0b00000010; Modo CTC
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS02)|(1<<CS00); // = 0b00000101; clk/1024 (From Prescaler) 16MHz/1024 =  15625 Hz
 4fc:	95 e0       	ldi	r25, 0x05	; 5
 4fe:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = (1<<OCIE0A); // Habilita el comparador. T=156/15625 Hz = 9.984ms ~= 10 ms
 500:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	sei();
 504:	78 94       	sei
 506:	08 95       	ret

00000508 <SEOSDispatcherTasks>:
}


void SEOSDispatcherTasks(){
	if(ADC_Flag){
 508:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 50c:	88 23       	and	r24, r24
 50e:	21 f0       	breq	.+8      	; 0x518 <SEOSDispatcherTasks+0x10>
		ADC_Update();
 510:	0e 94 9e 00 	call	0x13c	; 0x13c <ADC_Update>
		ADC_Flag = 0;
 514:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if(LCD_Flag){
 518:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <LCD_Flag>
 51c:	88 23       	and	r24, r24
 51e:	21 f0       	breq	.+8      	; 0x528 <SEOSDispatcherTasks+0x20>
		LCD_Update();
 520:	0e 94 00 02 	call	0x400	; 0x400 <LCD_Update>
		LCD_Flag = 0;
 524:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <LCD_Flag>
 528:	08 95       	ret

0000052a <SEOSSChedulerTasks>:
}

void SEOSSChedulerTasks(){
	static char adcCont=0, lcdCount=0;
	
	if(++adcCont==10)
 52a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <adcCont.1799>
 52e:	8f 5f       	subi	r24, 0xFF	; 255
 530:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <adcCont.1799>
 534:	8a 30       	cpi	r24, 0x0A	; 10
 536:	29 f4       	brne	.+10     	; 0x542 <SEOSSChedulerTasks+0x18>
	{
		ADC_Flag = 1;
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		adcCont=0;
 53e:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <adcCont.1799>
	}
	if(++lcdCount==50){
 542:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <lcdCount.1800>
 546:	8f 5f       	subi	r24, 0xFF	; 255
 548:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <lcdCount.1800>
 54c:	82 33       	cpi	r24, 0x32	; 50
 54e:	29 f4       	brne	.+10     	; 0x55a <SEOSSChedulerTasks+0x30>
		LCD_Flag=1;
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <LCD_Flag>
		lcdCount=0;
 556:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <lcdCount.1800>
 55a:	08 95       	ret

0000055c <__vector_14>:
		LCD_Flag = 0;
	}
}


ISR(TIMER0_COMPA_vect){
 55c:	1f 92       	push	r1
 55e:	0f 92       	push	r0
 560:	0f b6       	in	r0, 0x3f	; 63
 562:	0f 92       	push	r0
 564:	11 24       	eor	r1, r1
 566:	2f 93       	push	r18
 568:	3f 93       	push	r19
 56a:	4f 93       	push	r20
 56c:	5f 93       	push	r21
 56e:	6f 93       	push	r22
 570:	7f 93       	push	r23
 572:	8f 93       	push	r24
 574:	9f 93       	push	r25
 576:	af 93       	push	r26
 578:	bf 93       	push	r27
 57a:	ef 93       	push	r30
 57c:	ff 93       	push	r31
	SEOSSChedulerTasks();
 57e:	0e 94 95 02 	call	0x52a	; 0x52a <SEOSSChedulerTasks>
}
 582:	ff 91       	pop	r31
 584:	ef 91       	pop	r30
 586:	bf 91       	pop	r27
 588:	af 91       	pop	r26
 58a:	9f 91       	pop	r25
 58c:	8f 91       	pop	r24
 58e:	7f 91       	pop	r23
 590:	6f 91       	pop	r22
 592:	5f 91       	pop	r21
 594:	4f 91       	pop	r20
 596:	3f 91       	pop	r19
 598:	2f 91       	pop	r18
 59a:	0f 90       	pop	r0
 59c:	0f be       	out	0x3f, r0	; 63
 59e:	0f 90       	pop	r0
 5a0:	1f 90       	pop	r1
 5a2:	18 95       	reti

000005a4 <main>:


int main(void)
{
	
	DDRB = 0x03; //Seteo a PB0 y PB1 como pin de salida
 5a4:	83 e0       	ldi	r24, 0x03	; 3
 5a6:	84 b9       	out	0x04, r24	; 4
	DIDR0= 0x01; //Seteo ADC0 como pin de lectura
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	ADC_init();	//Inicializo el ADC
 5ae:	0e 94 73 00 	call	0xe6	; 0xe6 <ADC_init>
	LCD_Init(); //Inicializo el LCD
 5b2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_Init>
	SEOSTimer0Init(); //Inicializo el atendedor de interrupciones
 5b6:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <SEOSTimer0Init>
			
    while (1) 
    {
		SEOSDispatcherTasks();
 5ba:	0e 94 84 02 	call	0x508	; 0x508 <SEOSDispatcherTasks>
 5be:	fd cf       	rjmp	.-6      	; 0x5ba <main+0x16>

000005c0 <__cmpsf2>:
 5c0:	0e 94 ca 03 	call	0x794	; 0x794 <__fp_cmp>
 5c4:	08 f4       	brcc	.+2      	; 0x5c8 <__cmpsf2+0x8>
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	08 95       	ret

000005ca <__divsf3>:
 5ca:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__divsf3x>
 5ce:	0c 94 05 04 	jmp	0x80a	; 0x80a <__fp_round>
 5d2:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__fp_pscB>
 5d6:	58 f0       	brcs	.+22     	; 0x5ee <__divsf3+0x24>
 5d8:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__fp_pscA>
 5dc:	40 f0       	brcs	.+16     	; 0x5ee <__divsf3+0x24>
 5de:	29 f4       	brne	.+10     	; 0x5ea <__divsf3+0x20>
 5e0:	5f 3f       	cpi	r21, 0xFF	; 255
 5e2:	29 f0       	breq	.+10     	; 0x5ee <__divsf3+0x24>
 5e4:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__fp_inf>
 5e8:	51 11       	cpse	r21, r1
 5ea:	0c 94 39 04 	jmp	0x872	; 0x872 <__fp_szero>
 5ee:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__fp_nan>

000005f2 <__divsf3x>:
 5f2:	0e 94 16 04 	call	0x82c	; 0x82c <__fp_split3>
 5f6:	68 f3       	brcs	.-38     	; 0x5d2 <__divsf3+0x8>

000005f8 <__divsf3_pse>:
 5f8:	99 23       	and	r25, r25
 5fa:	b1 f3       	breq	.-20     	; 0x5e8 <__divsf3+0x1e>
 5fc:	55 23       	and	r21, r21
 5fe:	91 f3       	breq	.-28     	; 0x5e4 <__divsf3+0x1a>
 600:	95 1b       	sub	r25, r21
 602:	55 0b       	sbc	r21, r21
 604:	bb 27       	eor	r27, r27
 606:	aa 27       	eor	r26, r26
 608:	62 17       	cp	r22, r18
 60a:	73 07       	cpc	r23, r19
 60c:	84 07       	cpc	r24, r20
 60e:	38 f0       	brcs	.+14     	; 0x61e <__divsf3_pse+0x26>
 610:	9f 5f       	subi	r25, 0xFF	; 255
 612:	5f 4f       	sbci	r21, 0xFF	; 255
 614:	22 0f       	add	r18, r18
 616:	33 1f       	adc	r19, r19
 618:	44 1f       	adc	r20, r20
 61a:	aa 1f       	adc	r26, r26
 61c:	a9 f3       	breq	.-22     	; 0x608 <__divsf3_pse+0x10>
 61e:	35 d0       	rcall	.+106    	; 0x68a <__divsf3_pse+0x92>
 620:	0e 2e       	mov	r0, r30
 622:	3a f0       	brmi	.+14     	; 0x632 <__divsf3_pse+0x3a>
 624:	e0 e8       	ldi	r30, 0x80	; 128
 626:	32 d0       	rcall	.+100    	; 0x68c <__divsf3_pse+0x94>
 628:	91 50       	subi	r25, 0x01	; 1
 62a:	50 40       	sbci	r21, 0x00	; 0
 62c:	e6 95       	lsr	r30
 62e:	00 1c       	adc	r0, r0
 630:	ca f7       	brpl	.-14     	; 0x624 <__divsf3_pse+0x2c>
 632:	2b d0       	rcall	.+86     	; 0x68a <__divsf3_pse+0x92>
 634:	fe 2f       	mov	r31, r30
 636:	29 d0       	rcall	.+82     	; 0x68a <__divsf3_pse+0x92>
 638:	66 0f       	add	r22, r22
 63a:	77 1f       	adc	r23, r23
 63c:	88 1f       	adc	r24, r24
 63e:	bb 1f       	adc	r27, r27
 640:	26 17       	cp	r18, r22
 642:	37 07       	cpc	r19, r23
 644:	48 07       	cpc	r20, r24
 646:	ab 07       	cpc	r26, r27
 648:	b0 e8       	ldi	r27, 0x80	; 128
 64a:	09 f0       	breq	.+2      	; 0x64e <__divsf3_pse+0x56>
 64c:	bb 0b       	sbc	r27, r27
 64e:	80 2d       	mov	r24, r0
 650:	bf 01       	movw	r22, r30
 652:	ff 27       	eor	r31, r31
 654:	93 58       	subi	r25, 0x83	; 131
 656:	5f 4f       	sbci	r21, 0xFF	; 255
 658:	3a f0       	brmi	.+14     	; 0x668 <__divsf3_pse+0x70>
 65a:	9e 3f       	cpi	r25, 0xFE	; 254
 65c:	51 05       	cpc	r21, r1
 65e:	78 f0       	brcs	.+30     	; 0x67e <__divsf3_pse+0x86>
 660:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__fp_inf>
 664:	0c 94 39 04 	jmp	0x872	; 0x872 <__fp_szero>
 668:	5f 3f       	cpi	r21, 0xFF	; 255
 66a:	e4 f3       	brlt	.-8      	; 0x664 <__divsf3_pse+0x6c>
 66c:	98 3e       	cpi	r25, 0xE8	; 232
 66e:	d4 f3       	brlt	.-12     	; 0x664 <__divsf3_pse+0x6c>
 670:	86 95       	lsr	r24
 672:	77 95       	ror	r23
 674:	67 95       	ror	r22
 676:	b7 95       	ror	r27
 678:	f7 95       	ror	r31
 67a:	9f 5f       	subi	r25, 0xFF	; 255
 67c:	c9 f7       	brne	.-14     	; 0x670 <__divsf3_pse+0x78>
 67e:	88 0f       	add	r24, r24
 680:	91 1d       	adc	r25, r1
 682:	96 95       	lsr	r25
 684:	87 95       	ror	r24
 686:	97 f9       	bld	r25, 7
 688:	08 95       	ret
 68a:	e1 e0       	ldi	r30, 0x01	; 1
 68c:	66 0f       	add	r22, r22
 68e:	77 1f       	adc	r23, r23
 690:	88 1f       	adc	r24, r24
 692:	bb 1f       	adc	r27, r27
 694:	62 17       	cp	r22, r18
 696:	73 07       	cpc	r23, r19
 698:	84 07       	cpc	r24, r20
 69a:	ba 07       	cpc	r27, r26
 69c:	20 f0       	brcs	.+8      	; 0x6a6 <__divsf3_pse+0xae>
 69e:	62 1b       	sub	r22, r18
 6a0:	73 0b       	sbc	r23, r19
 6a2:	84 0b       	sbc	r24, r20
 6a4:	ba 0b       	sbc	r27, r26
 6a6:	ee 1f       	adc	r30, r30
 6a8:	88 f7       	brcc	.-30     	; 0x68c <__divsf3_pse+0x94>
 6aa:	e0 95       	com	r30
 6ac:	08 95       	ret

000006ae <__fixsfsi>:
 6ae:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__fixunssfsi>
 6b2:	68 94       	set
 6b4:	b1 11       	cpse	r27, r1
 6b6:	0c 94 39 04 	jmp	0x872	; 0x872 <__fp_szero>
 6ba:	08 95       	ret

000006bc <__fixunssfsi>:
 6bc:	0e 94 1e 04 	call	0x83c	; 0x83c <__fp_splitA>
 6c0:	88 f0       	brcs	.+34     	; 0x6e4 <__fixunssfsi+0x28>
 6c2:	9f 57       	subi	r25, 0x7F	; 127
 6c4:	98 f0       	brcs	.+38     	; 0x6ec <__fixunssfsi+0x30>
 6c6:	b9 2f       	mov	r27, r25
 6c8:	99 27       	eor	r25, r25
 6ca:	b7 51       	subi	r27, 0x17	; 23
 6cc:	b0 f0       	brcs	.+44     	; 0x6fa <__fixunssfsi+0x3e>
 6ce:	e1 f0       	breq	.+56     	; 0x708 <__fixunssfsi+0x4c>
 6d0:	66 0f       	add	r22, r22
 6d2:	77 1f       	adc	r23, r23
 6d4:	88 1f       	adc	r24, r24
 6d6:	99 1f       	adc	r25, r25
 6d8:	1a f0       	brmi	.+6      	; 0x6e0 <__fixunssfsi+0x24>
 6da:	ba 95       	dec	r27
 6dc:	c9 f7       	brne	.-14     	; 0x6d0 <__fixunssfsi+0x14>
 6de:	14 c0       	rjmp	.+40     	; 0x708 <__fixunssfsi+0x4c>
 6e0:	b1 30       	cpi	r27, 0x01	; 1
 6e2:	91 f0       	breq	.+36     	; 0x708 <__fixunssfsi+0x4c>
 6e4:	0e 94 38 04 	call	0x870	; 0x870 <__fp_zero>
 6e8:	b1 e0       	ldi	r27, 0x01	; 1
 6ea:	08 95       	ret
 6ec:	0c 94 38 04 	jmp	0x870	; 0x870 <__fp_zero>
 6f0:	67 2f       	mov	r22, r23
 6f2:	78 2f       	mov	r23, r24
 6f4:	88 27       	eor	r24, r24
 6f6:	b8 5f       	subi	r27, 0xF8	; 248
 6f8:	39 f0       	breq	.+14     	; 0x708 <__fixunssfsi+0x4c>
 6fa:	b9 3f       	cpi	r27, 0xF9	; 249
 6fc:	cc f3       	brlt	.-14     	; 0x6f0 <__fixunssfsi+0x34>
 6fe:	86 95       	lsr	r24
 700:	77 95       	ror	r23
 702:	67 95       	ror	r22
 704:	b3 95       	inc	r27
 706:	d9 f7       	brne	.-10     	; 0x6fe <__fixunssfsi+0x42>
 708:	3e f4       	brtc	.+14     	; 0x718 <__fixunssfsi+0x5c>
 70a:	90 95       	com	r25
 70c:	80 95       	com	r24
 70e:	70 95       	com	r23
 710:	61 95       	neg	r22
 712:	7f 4f       	sbci	r23, 0xFF	; 255
 714:	8f 4f       	sbci	r24, 0xFF	; 255
 716:	9f 4f       	sbci	r25, 0xFF	; 255
 718:	08 95       	ret

0000071a <__floatunsisf>:
 71a:	e8 94       	clt
 71c:	09 c0       	rjmp	.+18     	; 0x730 <__floatsisf+0x12>

0000071e <__floatsisf>:
 71e:	97 fb       	bst	r25, 7
 720:	3e f4       	brtc	.+14     	; 0x730 <__floatsisf+0x12>
 722:	90 95       	com	r25
 724:	80 95       	com	r24
 726:	70 95       	com	r23
 728:	61 95       	neg	r22
 72a:	7f 4f       	sbci	r23, 0xFF	; 255
 72c:	8f 4f       	sbci	r24, 0xFF	; 255
 72e:	9f 4f       	sbci	r25, 0xFF	; 255
 730:	99 23       	and	r25, r25
 732:	a9 f0       	breq	.+42     	; 0x75e <__floatsisf+0x40>
 734:	f9 2f       	mov	r31, r25
 736:	96 e9       	ldi	r25, 0x96	; 150
 738:	bb 27       	eor	r27, r27
 73a:	93 95       	inc	r25
 73c:	f6 95       	lsr	r31
 73e:	87 95       	ror	r24
 740:	77 95       	ror	r23
 742:	67 95       	ror	r22
 744:	b7 95       	ror	r27
 746:	f1 11       	cpse	r31, r1
 748:	f8 cf       	rjmp	.-16     	; 0x73a <__floatsisf+0x1c>
 74a:	fa f4       	brpl	.+62     	; 0x78a <__floatsisf+0x6c>
 74c:	bb 0f       	add	r27, r27
 74e:	11 f4       	brne	.+4      	; 0x754 <__floatsisf+0x36>
 750:	60 ff       	sbrs	r22, 0
 752:	1b c0       	rjmp	.+54     	; 0x78a <__floatsisf+0x6c>
 754:	6f 5f       	subi	r22, 0xFF	; 255
 756:	7f 4f       	sbci	r23, 0xFF	; 255
 758:	8f 4f       	sbci	r24, 0xFF	; 255
 75a:	9f 4f       	sbci	r25, 0xFF	; 255
 75c:	16 c0       	rjmp	.+44     	; 0x78a <__floatsisf+0x6c>
 75e:	88 23       	and	r24, r24
 760:	11 f0       	breq	.+4      	; 0x766 <__floatsisf+0x48>
 762:	96 e9       	ldi	r25, 0x96	; 150
 764:	11 c0       	rjmp	.+34     	; 0x788 <__floatsisf+0x6a>
 766:	77 23       	and	r23, r23
 768:	21 f0       	breq	.+8      	; 0x772 <__floatsisf+0x54>
 76a:	9e e8       	ldi	r25, 0x8E	; 142
 76c:	87 2f       	mov	r24, r23
 76e:	76 2f       	mov	r23, r22
 770:	05 c0       	rjmp	.+10     	; 0x77c <__floatsisf+0x5e>
 772:	66 23       	and	r22, r22
 774:	71 f0       	breq	.+28     	; 0x792 <__floatsisf+0x74>
 776:	96 e8       	ldi	r25, 0x86	; 134
 778:	86 2f       	mov	r24, r22
 77a:	70 e0       	ldi	r23, 0x00	; 0
 77c:	60 e0       	ldi	r22, 0x00	; 0
 77e:	2a f0       	brmi	.+10     	; 0x78a <__floatsisf+0x6c>
 780:	9a 95       	dec	r25
 782:	66 0f       	add	r22, r22
 784:	77 1f       	adc	r23, r23
 786:	88 1f       	adc	r24, r24
 788:	da f7       	brpl	.-10     	; 0x780 <__floatsisf+0x62>
 78a:	88 0f       	add	r24, r24
 78c:	96 95       	lsr	r25
 78e:	87 95       	ror	r24
 790:	97 f9       	bld	r25, 7
 792:	08 95       	ret

00000794 <__fp_cmp>:
 794:	99 0f       	add	r25, r25
 796:	00 08       	sbc	r0, r0
 798:	55 0f       	add	r21, r21
 79a:	aa 0b       	sbc	r26, r26
 79c:	e0 e8       	ldi	r30, 0x80	; 128
 79e:	fe ef       	ldi	r31, 0xFE	; 254
 7a0:	16 16       	cp	r1, r22
 7a2:	17 06       	cpc	r1, r23
 7a4:	e8 07       	cpc	r30, r24
 7a6:	f9 07       	cpc	r31, r25
 7a8:	c0 f0       	brcs	.+48     	; 0x7da <__fp_cmp+0x46>
 7aa:	12 16       	cp	r1, r18
 7ac:	13 06       	cpc	r1, r19
 7ae:	e4 07       	cpc	r30, r20
 7b0:	f5 07       	cpc	r31, r21
 7b2:	98 f0       	brcs	.+38     	; 0x7da <__fp_cmp+0x46>
 7b4:	62 1b       	sub	r22, r18
 7b6:	73 0b       	sbc	r23, r19
 7b8:	84 0b       	sbc	r24, r20
 7ba:	95 0b       	sbc	r25, r21
 7bc:	39 f4       	brne	.+14     	; 0x7cc <__fp_cmp+0x38>
 7be:	0a 26       	eor	r0, r26
 7c0:	61 f0       	breq	.+24     	; 0x7da <__fp_cmp+0x46>
 7c2:	23 2b       	or	r18, r19
 7c4:	24 2b       	or	r18, r20
 7c6:	25 2b       	or	r18, r21
 7c8:	21 f4       	brne	.+8      	; 0x7d2 <__fp_cmp+0x3e>
 7ca:	08 95       	ret
 7cc:	0a 26       	eor	r0, r26
 7ce:	09 f4       	brne	.+2      	; 0x7d2 <__fp_cmp+0x3e>
 7d0:	a1 40       	sbci	r26, 0x01	; 1
 7d2:	a6 95       	lsr	r26
 7d4:	8f ef       	ldi	r24, 0xFF	; 255
 7d6:	81 1d       	adc	r24, r1
 7d8:	81 1d       	adc	r24, r1
 7da:	08 95       	ret

000007dc <__fp_inf>:
 7dc:	97 f9       	bld	r25, 7
 7de:	9f 67       	ori	r25, 0x7F	; 127
 7e0:	80 e8       	ldi	r24, 0x80	; 128
 7e2:	70 e0       	ldi	r23, 0x00	; 0
 7e4:	60 e0       	ldi	r22, 0x00	; 0
 7e6:	08 95       	ret

000007e8 <__fp_nan>:
 7e8:	9f ef       	ldi	r25, 0xFF	; 255
 7ea:	80 ec       	ldi	r24, 0xC0	; 192
 7ec:	08 95       	ret

000007ee <__fp_pscA>:
 7ee:	00 24       	eor	r0, r0
 7f0:	0a 94       	dec	r0
 7f2:	16 16       	cp	r1, r22
 7f4:	17 06       	cpc	r1, r23
 7f6:	18 06       	cpc	r1, r24
 7f8:	09 06       	cpc	r0, r25
 7fa:	08 95       	ret

000007fc <__fp_pscB>:
 7fc:	00 24       	eor	r0, r0
 7fe:	0a 94       	dec	r0
 800:	12 16       	cp	r1, r18
 802:	13 06       	cpc	r1, r19
 804:	14 06       	cpc	r1, r20
 806:	05 06       	cpc	r0, r21
 808:	08 95       	ret

0000080a <__fp_round>:
 80a:	09 2e       	mov	r0, r25
 80c:	03 94       	inc	r0
 80e:	00 0c       	add	r0, r0
 810:	11 f4       	brne	.+4      	; 0x816 <__fp_round+0xc>
 812:	88 23       	and	r24, r24
 814:	52 f0       	brmi	.+20     	; 0x82a <__fp_round+0x20>
 816:	bb 0f       	add	r27, r27
 818:	40 f4       	brcc	.+16     	; 0x82a <__fp_round+0x20>
 81a:	bf 2b       	or	r27, r31
 81c:	11 f4       	brne	.+4      	; 0x822 <__fp_round+0x18>
 81e:	60 ff       	sbrs	r22, 0
 820:	04 c0       	rjmp	.+8      	; 0x82a <__fp_round+0x20>
 822:	6f 5f       	subi	r22, 0xFF	; 255
 824:	7f 4f       	sbci	r23, 0xFF	; 255
 826:	8f 4f       	sbci	r24, 0xFF	; 255
 828:	9f 4f       	sbci	r25, 0xFF	; 255
 82a:	08 95       	ret

0000082c <__fp_split3>:
 82c:	57 fd       	sbrc	r21, 7
 82e:	90 58       	subi	r25, 0x80	; 128
 830:	44 0f       	add	r20, r20
 832:	55 1f       	adc	r21, r21
 834:	59 f0       	breq	.+22     	; 0x84c <__fp_splitA+0x10>
 836:	5f 3f       	cpi	r21, 0xFF	; 255
 838:	71 f0       	breq	.+28     	; 0x856 <__fp_splitA+0x1a>
 83a:	47 95       	ror	r20

0000083c <__fp_splitA>:
 83c:	88 0f       	add	r24, r24
 83e:	97 fb       	bst	r25, 7
 840:	99 1f       	adc	r25, r25
 842:	61 f0       	breq	.+24     	; 0x85c <__fp_splitA+0x20>
 844:	9f 3f       	cpi	r25, 0xFF	; 255
 846:	79 f0       	breq	.+30     	; 0x866 <__fp_splitA+0x2a>
 848:	87 95       	ror	r24
 84a:	08 95       	ret
 84c:	12 16       	cp	r1, r18
 84e:	13 06       	cpc	r1, r19
 850:	14 06       	cpc	r1, r20
 852:	55 1f       	adc	r21, r21
 854:	f2 cf       	rjmp	.-28     	; 0x83a <__fp_split3+0xe>
 856:	46 95       	lsr	r20
 858:	f1 df       	rcall	.-30     	; 0x83c <__fp_splitA>
 85a:	08 c0       	rjmp	.+16     	; 0x86c <__fp_splitA+0x30>
 85c:	16 16       	cp	r1, r22
 85e:	17 06       	cpc	r1, r23
 860:	18 06       	cpc	r1, r24
 862:	99 1f       	adc	r25, r25
 864:	f1 cf       	rjmp	.-30     	; 0x848 <__fp_splitA+0xc>
 866:	86 95       	lsr	r24
 868:	71 05       	cpc	r23, r1
 86a:	61 05       	cpc	r22, r1
 86c:	08 94       	sec
 86e:	08 95       	ret

00000870 <__fp_zero>:
 870:	e8 94       	clt

00000872 <__fp_szero>:
 872:	bb 27       	eor	r27, r27
 874:	66 27       	eor	r22, r22
 876:	77 27       	eor	r23, r23
 878:	cb 01       	movw	r24, r22
 87a:	97 f9       	bld	r25, 7
 87c:	08 95       	ret

0000087e <__gesf2>:
 87e:	0e 94 ca 03 	call	0x794	; 0x794 <__fp_cmp>
 882:	08 f4       	brcc	.+2      	; 0x886 <__gesf2+0x8>
 884:	8f ef       	ldi	r24, 0xFF	; 255
 886:	08 95       	ret

00000888 <__mulsf3>:
 888:	0e 94 57 04 	call	0x8ae	; 0x8ae <__mulsf3x>
 88c:	0c 94 05 04 	jmp	0x80a	; 0x80a <__fp_round>
 890:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__fp_pscA>
 894:	38 f0       	brcs	.+14     	; 0x8a4 <__mulsf3+0x1c>
 896:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__fp_pscB>
 89a:	20 f0       	brcs	.+8      	; 0x8a4 <__mulsf3+0x1c>
 89c:	95 23       	and	r25, r21
 89e:	11 f0       	breq	.+4      	; 0x8a4 <__mulsf3+0x1c>
 8a0:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__fp_inf>
 8a4:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__fp_nan>
 8a8:	11 24       	eor	r1, r1
 8aa:	0c 94 39 04 	jmp	0x872	; 0x872 <__fp_szero>

000008ae <__mulsf3x>:
 8ae:	0e 94 16 04 	call	0x82c	; 0x82c <__fp_split3>
 8b2:	70 f3       	brcs	.-36     	; 0x890 <__mulsf3+0x8>

000008b4 <__mulsf3_pse>:
 8b4:	95 9f       	mul	r25, r21
 8b6:	c1 f3       	breq	.-16     	; 0x8a8 <__mulsf3+0x20>
 8b8:	95 0f       	add	r25, r21
 8ba:	50 e0       	ldi	r21, 0x00	; 0
 8bc:	55 1f       	adc	r21, r21
 8be:	62 9f       	mul	r22, r18
 8c0:	f0 01       	movw	r30, r0
 8c2:	72 9f       	mul	r23, r18
 8c4:	bb 27       	eor	r27, r27
 8c6:	f0 0d       	add	r31, r0
 8c8:	b1 1d       	adc	r27, r1
 8ca:	63 9f       	mul	r22, r19
 8cc:	aa 27       	eor	r26, r26
 8ce:	f0 0d       	add	r31, r0
 8d0:	b1 1d       	adc	r27, r1
 8d2:	aa 1f       	adc	r26, r26
 8d4:	64 9f       	mul	r22, r20
 8d6:	66 27       	eor	r22, r22
 8d8:	b0 0d       	add	r27, r0
 8da:	a1 1d       	adc	r26, r1
 8dc:	66 1f       	adc	r22, r22
 8de:	82 9f       	mul	r24, r18
 8e0:	22 27       	eor	r18, r18
 8e2:	b0 0d       	add	r27, r0
 8e4:	a1 1d       	adc	r26, r1
 8e6:	62 1f       	adc	r22, r18
 8e8:	73 9f       	mul	r23, r19
 8ea:	b0 0d       	add	r27, r0
 8ec:	a1 1d       	adc	r26, r1
 8ee:	62 1f       	adc	r22, r18
 8f0:	83 9f       	mul	r24, r19
 8f2:	a0 0d       	add	r26, r0
 8f4:	61 1d       	adc	r22, r1
 8f6:	22 1f       	adc	r18, r18
 8f8:	74 9f       	mul	r23, r20
 8fa:	33 27       	eor	r19, r19
 8fc:	a0 0d       	add	r26, r0
 8fe:	61 1d       	adc	r22, r1
 900:	23 1f       	adc	r18, r19
 902:	84 9f       	mul	r24, r20
 904:	60 0d       	add	r22, r0
 906:	21 1d       	adc	r18, r1
 908:	82 2f       	mov	r24, r18
 90a:	76 2f       	mov	r23, r22
 90c:	6a 2f       	mov	r22, r26
 90e:	11 24       	eor	r1, r1
 910:	9f 57       	subi	r25, 0x7F	; 127
 912:	50 40       	sbci	r21, 0x00	; 0
 914:	9a f0       	brmi	.+38     	; 0x93c <__stack+0x3d>
 916:	f1 f0       	breq	.+60     	; 0x954 <__stack+0x55>
 918:	88 23       	and	r24, r24
 91a:	4a f0       	brmi	.+18     	; 0x92e <__stack+0x2f>
 91c:	ee 0f       	add	r30, r30
 91e:	ff 1f       	adc	r31, r31
 920:	bb 1f       	adc	r27, r27
 922:	66 1f       	adc	r22, r22
 924:	77 1f       	adc	r23, r23
 926:	88 1f       	adc	r24, r24
 928:	91 50       	subi	r25, 0x01	; 1
 92a:	50 40       	sbci	r21, 0x00	; 0
 92c:	a9 f7       	brne	.-22     	; 0x918 <__stack+0x19>
 92e:	9e 3f       	cpi	r25, 0xFE	; 254
 930:	51 05       	cpc	r21, r1
 932:	80 f0       	brcs	.+32     	; 0x954 <__stack+0x55>
 934:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__fp_inf>
 938:	0c 94 39 04 	jmp	0x872	; 0x872 <__fp_szero>
 93c:	5f 3f       	cpi	r21, 0xFF	; 255
 93e:	e4 f3       	brlt	.-8      	; 0x938 <__stack+0x39>
 940:	98 3e       	cpi	r25, 0xE8	; 232
 942:	d4 f3       	brlt	.-12     	; 0x938 <__stack+0x39>
 944:	86 95       	lsr	r24
 946:	77 95       	ror	r23
 948:	67 95       	ror	r22
 94a:	b7 95       	ror	r27
 94c:	f7 95       	ror	r31
 94e:	e7 95       	ror	r30
 950:	9f 5f       	subi	r25, 0xFF	; 255
 952:	c1 f7       	brne	.-16     	; 0x944 <__stack+0x45>
 954:	fe 2b       	or	r31, r30
 956:	88 0f       	add	r24, r24
 958:	91 1d       	adc	r25, r1
 95a:	96 95       	lsr	r25
 95c:	87 95       	ror	r24
 95e:	97 f9       	bld	r25, 7
 960:	08 95       	ret

00000962 <__divmodhi4>:
 962:	97 fb       	bst	r25, 7
 964:	07 2e       	mov	r0, r23
 966:	16 f4       	brtc	.+4      	; 0x96c <__divmodhi4+0xa>
 968:	00 94       	com	r0
 96a:	07 d0       	rcall	.+14     	; 0x97a <__divmodhi4_neg1>
 96c:	77 fd       	sbrc	r23, 7
 96e:	09 d0       	rcall	.+18     	; 0x982 <__divmodhi4_neg2>
 970:	0e 94 c5 04 	call	0x98a	; 0x98a <__udivmodhi4>
 974:	07 fc       	sbrc	r0, 7
 976:	05 d0       	rcall	.+10     	; 0x982 <__divmodhi4_neg2>
 978:	3e f4       	brtc	.+14     	; 0x988 <__divmodhi4_exit>

0000097a <__divmodhi4_neg1>:
 97a:	90 95       	com	r25
 97c:	81 95       	neg	r24
 97e:	9f 4f       	sbci	r25, 0xFF	; 255
 980:	08 95       	ret

00000982 <__divmodhi4_neg2>:
 982:	70 95       	com	r23
 984:	61 95       	neg	r22
 986:	7f 4f       	sbci	r23, 0xFF	; 255

00000988 <__divmodhi4_exit>:
 988:	08 95       	ret

0000098a <__udivmodhi4>:
 98a:	aa 1b       	sub	r26, r26
 98c:	bb 1b       	sub	r27, r27
 98e:	51 e1       	ldi	r21, 0x11	; 17
 990:	07 c0       	rjmp	.+14     	; 0x9a0 <__udivmodhi4_ep>

00000992 <__udivmodhi4_loop>:
 992:	aa 1f       	adc	r26, r26
 994:	bb 1f       	adc	r27, r27
 996:	a6 17       	cp	r26, r22
 998:	b7 07       	cpc	r27, r23
 99a:	10 f0       	brcs	.+4      	; 0x9a0 <__udivmodhi4_ep>
 99c:	a6 1b       	sub	r26, r22
 99e:	b7 0b       	sbc	r27, r23

000009a0 <__udivmodhi4_ep>:
 9a0:	88 1f       	adc	r24, r24
 9a2:	99 1f       	adc	r25, r25
 9a4:	5a 95       	dec	r21
 9a6:	a9 f7       	brne	.-22     	; 0x992 <__udivmodhi4_loop>
 9a8:	80 95       	com	r24
 9aa:	90 95       	com	r25
 9ac:	bc 01       	movw	r22, r24
 9ae:	cd 01       	movw	r24, r26
 9b0:	08 95       	ret

000009b2 <_exit>:
 9b2:	f8 94       	cli

000009b4 <__stop_program>:
 9b4:	ff cf       	rjmp	.-2      	; 0x9b4 <__stop_program>
